
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002190  00002204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019c8  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b4a  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004736  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004876  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000049e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000662f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000751a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000082c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000086b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008e83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <main>
      7a:	0c 94 c6 10 	jmp	0x218c	; 0x218c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e6       	ldi	r26, 0x67	; 103
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e6       	ldi	r24, 0x67	; 103
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_vidSetPinVal>:
#include "DIO_priv.h"



void DIO_vidSetPinVal (u8 PortId, u8 pinId, u8 val)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if (PortId<=DIO_PORTD && pinId<=DIO_PIN7)
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <DIO_vidSetPinVal+0x22>
     b56:	ee c0       	rjmp	.+476    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <DIO_vidSetPinVal+0x2a>
     b5e:	ea c0       	rjmp	.+468    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
	{
		if(val == DIO_LOW)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	88 23       	and	r24, r24
     b64:	09 f0       	breq	.+2      	; 0xb68 <DIO_vidSetPinVal+0x32>
     b66:	74 c0       	rjmp	.+232    	; 0xc50 <DIO_vidSetPinVal+0x11a>
		{
			switch (PortId)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	59 f1       	breq	.+86     	; 0xbd2 <DIO_vidSetPinVal+0x9c>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_vidSetPinVal+0x5a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	69 f0       	breq	.+26     	; 0xba8 <DIO_vidSetPinVal+0x72>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	89 f1       	breq	.+98     	; 0xbfc <DIO_vidSetPinVal+0xc6>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <DIO_vidSetPinVal+0x70>
     ba4:	40 c0       	rjmp	.+128    	; 0xc26 <DIO_vidSetPinVal+0xf0>
     ba6:	c6 c0       	rjmp	.+396    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
			{
			case DIO_PORTA:
				CLR_BIT(PORTA_REG, pinId);
     ba8:	ab e3       	ldi	r26, 0x3B	; 59
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	eb e3       	ldi	r30, 0x3B	; 59
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	48 2f       	mov	r20, r24
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 2e       	mov	r0, r18
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <DIO_vidSetPinVal+0x90>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	0a 94       	dec	r0
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <DIO_vidSetPinVal+0x8c>
     bca:	80 95       	com	r24
     bcc:	84 23       	and	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	b1 c0       	rjmp	.+354    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
				break;

			case DIO_PORTB:
				CLR_BIT(PORTB_REG, pinId);
     bd2:	a8 e3       	ldi	r26, 0x38	; 56
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e8 e3       	ldi	r30, 0x38	; 56
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 2e       	mov	r0, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_vidSetPinVal+0xba>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_vidSetPinVal+0xb6>
     bf4:	80 95       	com	r24
     bf6:	84 23       	and	r24, r20
     bf8:	8c 93       	st	X, r24
     bfa:	9c c0       	rjmp	.+312    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
				break;

			case DIO_PORTC:
				CLR_BIT(PORTC_REG, pinId);
     bfc:	a5 e3       	ldi	r26, 0x35	; 53
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e5 e3       	ldi	r30, 0x35	; 53
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_vidSetPinVal+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_vidSetPinVal+0xe0>
     c1e:	80 95       	com	r24
     c20:	84 23       	and	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	87 c0       	rjmp	.+270    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
				break;

			case DIO_PORTD:
				CLR_BIT(PORTD_REG, pinId);
     c26:	a2 e3       	ldi	r26, 0x32	; 50
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e2 e3       	ldi	r30, 0x32	; 50
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_vidSetPinVal+0x10e>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_vidSetPinVal+0x10a>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	72 c0       	rjmp	.+228    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
				break;

			}
		}
		else if(val == DIO_HIGH)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	09 f0       	breq	.+2      	; 0xc58 <DIO_vidSetPinVal+0x122>
     c56:	6e c0       	rjmp	.+220    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
		{
			switch (PortId)
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	3d 83       	std	Y+5, r19	; 0x05
     c60:	2c 83       	std	Y+4, r18	; 0x04
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	9d 81       	ldd	r25, Y+5	; 0x05
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	91 05       	cpc	r25, r1
     c6a:	49 f1       	breq	.+82     	; 0xcbe <DIO_vidSetPinVal+0x188>
     c6c:	2c 81       	ldd	r18, Y+4	; 0x04
     c6e:	3d 81       	ldd	r19, Y+5	; 0x05
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	2c f4       	brge	.+10     	; 0xc80 <DIO_vidSetPinVal+0x14a>
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	61 f0       	breq	.+24     	; 0xc96 <DIO_vidSetPinVal+0x160>
     c7e:	5a c0       	rjmp	.+180    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
     c80:	2c 81       	ldd	r18, Y+4	; 0x04
     c82:	3d 81       	ldd	r19, Y+5	; 0x05
     c84:	22 30       	cpi	r18, 0x02	; 2
     c86:	31 05       	cpc	r19, r1
     c88:	71 f1       	breq	.+92     	; 0xce6 <DIO_vidSetPinVal+0x1b0>
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	e9 f1       	breq	.+122    	; 0xd0e <DIO_vidSetPinVal+0x1d8>
     c94:	4f c0       	rjmp	.+158    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
				{
				case DIO_PORTA:
					SET_BIT(PORTA_REG, pinId);
     c96:	ab e3       	ldi	r26, 0x3B	; 59
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	eb e3       	ldi	r30, 0x3B	; 59
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_vidSetPinVal+0x17e>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_vidSetPinVal+0x17a>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	3b c0       	rjmp	.+118    	; 0xd34 <DIO_vidSetPinVal+0x1fe>
					break;

				case DIO_PORTB:
					SET_BIT(PORTB_REG, pinId);
     cbe:	a8 e3       	ldi	r26, 0x38	; 56
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e8 e3       	ldi	r30, 0x38	; 56
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_vidSetPinVal+0x1a6>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_vidSetPinVal+0x1a2>
     ce0:	84 2b       	or	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	27 c0       	rjmp	.+78     	; 0xd34 <DIO_vidSetPinVal+0x1fe>
					break;

				case DIO_PORTC:
					SET_BIT(PORTC_REG, pinId);
     ce6:	a5 e3       	ldi	r26, 0x35	; 53
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e5 e3       	ldi	r30, 0x35	; 53
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_vidSetPinVal+0x1ce>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_vidSetPinVal+0x1ca>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <DIO_vidSetPinVal+0x1fe>
					break;

				case DIO_PORTD:
					SET_BIT(PORTD_REG, pinId);
     d0e:	a2 e3       	ldi	r26, 0x32	; 50
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e2 e3       	ldi	r30, 0x32	; 50
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_vidSetPinVal+0x1f6>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_vidSetPinVal+0x1f2>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
	else
	{
		// report error
	}

}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_vidSetPinDir>:


void DIO_vidSetPinDir (u8 PortId, u8 pinId, u8 dir)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if (PortId<=DIO_PORTD && pinId<=DIO_PIN7)
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	08 f0       	brcs	.+2      	; 0xd68 <DIO_vidSetPinDir+0x22>
     d66:	ee c0       	rjmp	.+476    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	88 30       	cpi	r24, 0x08	; 8
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <DIO_vidSetPinDir+0x2a>
     d6e:	ea c0       	rjmp	.+468    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
		{
			if(dir == DIO_INPUT)    // there is a conflict here for me
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	88 23       	and	r24, r24
     d74:	09 f0       	breq	.+2      	; 0xd78 <DIO_vidSetPinDir+0x32>
     d76:	74 c0       	rjmp	.+232    	; 0xe60 <DIO_vidSetPinDir+0x11a>
			{
				switch (PortId)
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	3f 83       	std	Y+7, r19	; 0x07
     d80:	2e 83       	std	Y+6, r18	; 0x06
     d82:	8e 81       	ldd	r24, Y+6	; 0x06
     d84:	9f 81       	ldd	r25, Y+7	; 0x07
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 05       	cpc	r25, r1
     d8a:	59 f1       	breq	.+86     	; 0xde2 <DIO_vidSetPinDir+0x9c>
     d8c:	2e 81       	ldd	r18, Y+6	; 0x06
     d8e:	3f 81       	ldd	r19, Y+7	; 0x07
     d90:	22 30       	cpi	r18, 0x02	; 2
     d92:	31 05       	cpc	r19, r1
     d94:	2c f4       	brge	.+10     	; 0xda0 <DIO_vidSetPinDir+0x5a>
     d96:	8e 81       	ldd	r24, Y+6	; 0x06
     d98:	9f 81       	ldd	r25, Y+7	; 0x07
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	69 f0       	breq	.+26     	; 0xdb8 <DIO_vidSetPinDir+0x72>
     d9e:	d2 c0       	rjmp	.+420    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
     da0:	2e 81       	ldd	r18, Y+6	; 0x06
     da2:	3f 81       	ldd	r19, Y+7	; 0x07
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	89 f1       	breq	.+98     	; 0xe0c <DIO_vidSetPinDir+0xc6>
     daa:	8e 81       	ldd	r24, Y+6	; 0x06
     dac:	9f 81       	ldd	r25, Y+7	; 0x07
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	91 05       	cpc	r25, r1
     db2:	09 f4       	brne	.+2      	; 0xdb6 <DIO_vidSetPinDir+0x70>
     db4:	40 c0       	rjmp	.+128    	; 0xe36 <DIO_vidSetPinDir+0xf0>
     db6:	c6 c0       	rjmp	.+396    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
				{
				case DIO_PORTA:
					CLR_BIT(DDRA_REG, pinId);
     db8:	aa e3       	ldi	r26, 0x3A	; 58
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	ea e3       	ldi	r30, 0x3A	; 58
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_vidSetPinDir+0x90>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_vidSetPinDir+0x8c>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	b1 c0       	rjmp	.+354    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
					break;

				case DIO_PORTB:
					CLR_BIT(DDRB_REG, pinId);
     de2:	a7 e3       	ldi	r26, 0x37	; 55
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_vidSetPinDir+0xba>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_vidSetPinDir+0xb6>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	9c c0       	rjmp	.+312    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
					break;

				case DIO_PORTC:
					CLR_BIT(DDRC_REG, pinId);
     e0c:	a4 e3       	ldi	r26, 0x34	; 52
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e4 e3       	ldi	r30, 0x34	; 52
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_vidSetPinDir+0xe4>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <DIO_vidSetPinDir+0xe0>
     e2e:	80 95       	com	r24
     e30:	84 23       	and	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	87 c0       	rjmp	.+270    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
					break;

				case DIO_PORTD:
					CLR_BIT(DDRD_REG, pinId);
     e36:	a1 e3       	ldi	r26, 0x31	; 49
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e3       	ldi	r30, 0x31	; 49
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_vidSetPinDir+0x10e>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_vidSetPinDir+0x10a>
     e58:	80 95       	com	r24
     e5a:	84 23       	and	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	72 c0       	rjmp	.+228    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
					break;

				}
			}
			else if(dir == DIO_OUTPUT)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	09 f0       	breq	.+2      	; 0xe68 <DIO_vidSetPinDir+0x122>
     e66:	6e c0       	rjmp	.+220    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
			{
				switch (PortId)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	3d 83       	std	Y+5, r19	; 0x05
     e70:	2c 83       	std	Y+4, r18	; 0x04
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	91 05       	cpc	r25, r1
     e7a:	49 f1       	breq	.+82     	; 0xece <DIO_vidSetPinDir+0x188>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	2c f4       	brge	.+10     	; 0xe90 <DIO_vidSetPinDir+0x14a>
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	9d 81       	ldd	r25, Y+5	; 0x05
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	61 f0       	breq	.+24     	; 0xea6 <DIO_vidSetPinDir+0x160>
     e8e:	5a c0       	rjmp	.+180    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	71 f1       	breq	.+92     	; 0xef6 <DIO_vidSetPinDir+0x1b0>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	91 05       	cpc	r25, r1
     ea2:	e9 f1       	breq	.+122    	; 0xf1e <DIO_vidSetPinDir+0x1d8>
     ea4:	4f c0       	rjmp	.+158    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
					{
					case DIO_PORTA:
						SET_BIT(DDRA_REG, pinId);
     ea6:	aa e3       	ldi	r26, 0x3A	; 58
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ea e3       	ldi	r30, 0x3A	; 58
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_vidSetPinDir+0x17e>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_vidSetPinDir+0x17a>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	3b c0       	rjmp	.+118    	; 0xf44 <DIO_vidSetPinDir+0x1fe>
						break;

					case DIO_PORTB:
						SET_BIT(DDRB_REG, pinId);
     ece:	a7 e3       	ldi	r26, 0x37	; 55
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e7 e3       	ldi	r30, 0x37	; 55
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_vidSetPinDir+0x1a6>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_vidSetPinDir+0x1a2>
     ef0:	84 2b       	or	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	27 c0       	rjmp	.+78     	; 0xf44 <DIO_vidSetPinDir+0x1fe>
						break;

					case DIO_PORTC:
						SET_BIT(DDRC_REG, pinId);
     ef6:	a4 e3       	ldi	r26, 0x34	; 52
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e4 e3       	ldi	r30, 0x34	; 52
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_vidSetPinDir+0x1ce>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_vidSetPinDir+0x1ca>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <DIO_vidSetPinDir+0x1fe>
						break;

					case DIO_PORTD:
						SET_BIT(DDRD_REG, pinId);
     f1e:	a1 e3       	ldi	r26, 0x31	; 49
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e1 e3       	ldi	r30, 0x31	; 49
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_vidSetPinDir+0x1f6>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_vidSetPinDir+0x1f2>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
		else
		{
			// report error
		}

	}
     f44:	27 96       	adiw	r28, 0x07	; 7
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <DIO_vidSetPortVal>:




void DIO_vidSetPortVal (u8 PortId, u8 val)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <DIO_vidSetPortVal+0x6>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <DIO_vidSetPortVal+0x8>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	6a 83       	std	Y+2, r22	; 0x02

	if(PortId<= DIO_PORTD)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	90 f5       	brcc	.+100    	; 0xfd0 <DIO_vidSetPortVal+0x7a>
	{
		switch (PortId)
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	3c 83       	std	Y+4, r19	; 0x04
     f74:	2b 83       	std	Y+3, r18	; 0x03
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	91 05       	cpc	r25, r1
     f7e:	d1 f0       	breq	.+52     	; 0xfb4 <DIO_vidSetPortVal+0x5e>
     f80:	2b 81       	ldd	r18, Y+3	; 0x03
     f82:	3c 81       	ldd	r19, Y+4	; 0x04
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	2c f4       	brge	.+10     	; 0xf94 <DIO_vidSetPortVal+0x3e>
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	61 f0       	breq	.+24     	; 0xfaa <DIO_vidSetPortVal+0x54>
     f92:	1e c0       	rjmp	.+60     	; 0xfd0 <DIO_vidSetPortVal+0x7a>
     f94:	2b 81       	ldd	r18, Y+3	; 0x03
     f96:	3c 81       	ldd	r19, Y+4	; 0x04
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	81 f0       	breq	.+32     	; 0xfbe <DIO_vidSetPortVal+0x68>
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	91 05       	cpc	r25, r1
     fa6:	81 f0       	breq	.+32     	; 0xfc8 <DIO_vidSetPortVal+0x72>
     fa8:	13 c0       	rjmp	.+38     	; 0xfd0 <DIO_vidSetPortVal+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = val;
     faa:	eb e3       	ldi	r30, 0x3B	; 59
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	80 83       	st	Z, r24
     fb2:	0e c0       	rjmp	.+28     	; 0xfd0 <DIO_vidSetPortVal+0x7a>
			break;

		case DIO_PORTB:
			PORTB_REG = val;
     fb4:	e8 e3       	ldi	r30, 0x38	; 56
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	80 83       	st	Z, r24
     fbc:	09 c0       	rjmp	.+18     	; 0xfd0 <DIO_vidSetPortVal+0x7a>
			break;

		case DIO_PORTC:
			PORTC_REG = val;
     fbe:	e5 e3       	ldi	r30, 0x35	; 53
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	80 83       	st	Z, r24
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <DIO_vidSetPortVal+0x7a>
			break;

		case DIO_PORTD:
			PORTD_REG = val;
     fc8:	e2 e3       	ldi	r30, 0x32	; 50
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	80 83       	st	Z, r24
	{
		// report error
	}


}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <DIO_vidSetPortDir>:


void DIO_vidSetPortDir (u8 PortId, u8 dir)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DIO_vidSetPortDir+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_vidSetPortDir+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	6a 83       	std	Y+2, r22	; 0x02
	if (PortId <= DIO_PORTD)
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	90 f5       	brcc	.+100    	; 0x1058 <DIO_vidSetPortDir+0x7a>
	{
		switch(PortId)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3c 83       	std	Y+4, r19	; 0x04
     ffc:	2b 83       	std	Y+3, r18	; 0x03
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	d1 f0       	breq	.+52     	; 0x103c <DIO_vidSetPortDir+0x5e>
    1008:	2b 81       	ldd	r18, Y+3	; 0x03
    100a:	3c 81       	ldd	r19, Y+4	; 0x04
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	2c f4       	brge	.+10     	; 0x101c <DIO_vidSetPortDir+0x3e>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	61 f0       	breq	.+24     	; 0x1032 <DIO_vidSetPortDir+0x54>
    101a:	1e c0       	rjmp	.+60     	; 0x1058 <DIO_vidSetPortDir+0x7a>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	81 f0       	breq	.+32     	; 0x1046 <DIO_vidSetPortDir+0x68>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	81 f0       	breq	.+32     	; 0x1050 <DIO_vidSetPortDir+0x72>
    1030:	13 c0       	rjmp	.+38     	; 0x1058 <DIO_vidSetPortDir+0x7a>
		{
			case DIO_PORTA:
				DDRA_REG = dir;
    1032:	ea e3       	ldi	r30, 0x3A	; 58
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	80 83       	st	Z, r24
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <DIO_vidSetPortDir+0x7a>
				break;

			case DIO_PORTB:
				DDRB_REG = dir;
    103c:	e7 e3       	ldi	r30, 0x37	; 55
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	80 83       	st	Z, r24
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <DIO_vidSetPortDir+0x7a>
				break;

			case DIO_PORTC:
				DDRC_REG = dir;
    1046:	e4 e3       	ldi	r30, 0x34	; 52
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	80 83       	st	Z, r24
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <DIO_vidSetPortDir+0x7a>
				break;

			case DIO_PORTD:
				DDRD_REG = dir;
    1050:	e1 e3       	ldi	r30, 0x31	; 49
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	80 83       	st	Z, r24
	}
	else
	{
		// Report Error
	}
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <DIO_u8GetPinValue>:


u8   DIO_u8GetPinValue (u8 PortId, u8 pinId)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <DIO_u8GetPinValue+0x6>
    106c:	00 d0       	rcall	.+0      	; 0x106e <DIO_u8GetPinValue+0x8>
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	8a 83       	std	Y+2, r24	; 0x02
    1076:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_val;
	if (PortId<=DIO_PORTD && pinId<=DIO_PIN7)
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	84 30       	cpi	r24, 0x04	; 4
    107c:	08 f0       	brcs	.+2      	; 0x1080 <DIO_u8GetPinValue+0x1a>
    107e:	6b c0       	rjmp	.+214    	; 0x1156 <DIO_u8GetPinValue+0xf0>
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 30       	cpi	r24, 0x08	; 8
    1084:	08 f0       	brcs	.+2      	; 0x1088 <DIO_u8GetPinValue+0x22>
    1086:	67 c0       	rjmp	.+206    	; 0x1156 <DIO_u8GetPinValue+0xf0>
	{
		switch (PortId)
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	3d 83       	std	Y+5, r19	; 0x05
    1090:	2c 83       	std	Y+4, r18	; 0x04
    1092:	4c 81       	ldd	r20, Y+4	; 0x04
    1094:	5d 81       	ldd	r21, Y+5	; 0x05
    1096:	41 30       	cpi	r20, 0x01	; 1
    1098:	51 05       	cpc	r21, r1
    109a:	41 f1       	breq	.+80     	; 0x10ec <DIO_u8GetPinValue+0x86>
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	9d 81       	ldd	r25, Y+5	; 0x05
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	91 05       	cpc	r25, r1
    10a4:	34 f4       	brge	.+12     	; 0x10b2 <DIO_u8GetPinValue+0x4c>
    10a6:	2c 81       	ldd	r18, Y+4	; 0x04
    10a8:	3d 81       	ldd	r19, Y+5	; 0x05
    10aa:	21 15       	cp	r18, r1
    10ac:	31 05       	cpc	r19, r1
    10ae:	61 f0       	breq	.+24     	; 0x10c8 <DIO_u8GetPinValue+0x62>
    10b0:	52 c0       	rjmp	.+164    	; 0x1156 <DIO_u8GetPinValue+0xf0>
    10b2:	4c 81       	ldd	r20, Y+4	; 0x04
    10b4:	5d 81       	ldd	r21, Y+5	; 0x05
    10b6:	42 30       	cpi	r20, 0x02	; 2
    10b8:	51 05       	cpc	r21, r1
    10ba:	51 f1       	breq	.+84     	; 0x1110 <DIO_u8GetPinValue+0xaa>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	91 05       	cpc	r25, r1
    10c4:	b9 f1       	breq	.+110    	; 0x1134 <DIO_u8GetPinValue+0xce>
    10c6:	47 c0       	rjmp	.+142    	; 0x1156 <DIO_u8GetPinValue+0xf0>
		{
		case DIO_PORTA:
			ret_val = GET_BIT( PINA_REG , pinId);
    10c8:	e9 e3       	ldi	r30, 0x39	; 57
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a9 01       	movw	r20, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_u8GetPinValue+0x7a>
    10dc:	55 95       	asr	r21
    10de:	47 95       	ror	r20
    10e0:	8a 95       	dec	r24
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_u8GetPinValue+0x76>
    10e4:	ca 01       	movw	r24, r20
    10e6:	81 70       	andi	r24, 0x01	; 1
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	35 c0       	rjmp	.+106    	; 0x1156 <DIO_u8GetPinValue+0xf0>
			break;

		case DIO_PORTB:
			ret_val= GET_BIT (PINB_REG, pinId);
    10ec:	e6 e3       	ldi	r30, 0x36	; 54
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_u8GetPinValue+0x9e>
    1100:	55 95       	asr	r21
    1102:	47 95       	ror	r20
    1104:	8a 95       	dec	r24
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_u8GetPinValue+0x9a>
    1108:	ca 01       	movw	r24, r20
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	23 c0       	rjmp	.+70     	; 0x1156 <DIO_u8GetPinValue+0xf0>
			break;

		case DIO_PORTC:
			ret_val = GET_BIT (PINC_REG, pinId);
    1110:	e3 e3       	ldi	r30, 0x33	; 51
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a9 01       	movw	r20, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_u8GetPinValue+0xc2>
    1124:	55 95       	asr	r21
    1126:	47 95       	ror	r20
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_u8GetPinValue+0xbe>
    112c:	ca 01       	movw	r24, r20
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <DIO_u8GetPinValue+0xf0>
			break;

		case DIO_PORTD:
			ret_val = GET_BIT (PIND_REG, pinId);
    1134:	e0 e3       	ldi	r30, 0x30	; 48
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a9 01       	movw	r20, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_u8GetPinValue+0xe6>
    1148:	55 95       	asr	r21
    114a:	47 95       	ror	r20
    114c:	8a 95       	dec	r24
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_u8GetPinValue+0xe2>
    1150:	ca 01       	movw	r24, r20
    1152:	81 70       	andi	r24, 0x01	; 1
    1154:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		//Report Error
	}

	return ret_val;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <KPD_u8GetPressedKey>:
		{'c', '0', '=', '+'}
};


u8 KPD_u8GetPressedKey (void)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	61 97       	sbiw	r28, 0x11	; 17
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
	u8 u8SwVal = NOT_PRESSED;    /*because if we don't press any key, garbage value doesn't be returned*/
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	89 8b       	std	Y+17, r24	; 0x11
	u8 u8Col;
	u8 u8Row;

	for (u8Col = 0; u8Col<4; u8Col++)
    1180:	18 8a       	std	Y+16, r1	; 0x10
    1182:	ab c0       	rjmp	.+342    	; 0x12da <KPD_u8GetPressedKey+0x172>
	{
		DIO_vidSetPinVal (KPD_PORT, u8Col, DIO_LOW);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	68 89       	ldd	r22, Y+16	; 0x10
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
		for (u8Row = 4; u8Row< 8; u8Row++)
    118e:	84 e0       	ldi	r24, 0x04	; 4
    1190:	8f 87       	std	Y+15, r24	; 0x0f
    1192:	97 c0       	rjmp	.+302    	; 0x12c2 <KPD_u8GetPressedKey+0x15a>
		{
			if (DIO_u8GetPinValue(KPD_PORT, u8Row)==DIO_LOW)
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	6f 85       	ldd	r22, Y+15	; 0x0f
    1198:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_u8GetPinValue>
    119c:	88 23       	and	r24, r24
    119e:	09 f0       	breq	.+2      	; 0x11a2 <KPD_u8GetPressedKey+0x3a>
    11a0:	8d c0       	rjmp	.+282    	; 0x12bc <KPD_u8GetPressedKey+0x154>
			{
				u8SwVal = KPD_au8Array [u8Row-4][u8Col];
    11a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	ac 01       	movw	r20, r24
    11aa:	44 50       	subi	r20, 0x04	; 4
    11ac:	50 40       	sbci	r21, 0x00	; 0
    11ae:	88 89       	ldd	r24, Y+16	; 0x10
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	ca 01       	movw	r24, r20
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	82 0f       	add	r24, r18
    11c0:	93 1f       	adc	r25, r19
    11c2:	fc 01       	movw	r30, r24
    11c4:	e1 59       	subi	r30, 0x91	; 145
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	80 81       	ld	r24, Z
    11ca:	89 8b       	std	Y+17, r24	; 0x11
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a0 e2       	ldi	r26, 0x20	; 32
    11d2:	b1 e4       	ldi	r27, 0x41	; 65
    11d4:	8b 87       	std	Y+11, r24	; 0x0b
    11d6:	9c 87       	std	Y+12, r25	; 0x0c
    11d8:	ad 87       	std	Y+13, r26	; 0x0d
    11da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11de:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	4a ef       	ldi	r20, 0xFA	; 250
    11ea:	54 e4       	ldi	r21, 0x44	; 68
    11ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	8f 83       	std	Y+7, r24	; 0x07
    11f6:	98 87       	std	Y+8, r25	; 0x08
    11f8:	a9 87       	std	Y+9, r26	; 0x09
    11fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11fc:	6f 81       	ldd	r22, Y+7	; 0x07
    11fe:	78 85       	ldd	r23, Y+8	; 0x08
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e8       	ldi	r20, 0x80	; 128
    120a:	5f e3       	ldi	r21, 0x3F	; 63
    120c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1210:	88 23       	and	r24, r24
    1212:	2c f4       	brge	.+10     	; 0x121e <KPD_u8GetPressedKey+0xb6>
		__ticks = 1;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	9e 83       	std	Y+6, r25	; 0x06
    121a:	8d 83       	std	Y+5, r24	; 0x05
    121c:	3f c0       	rjmp	.+126    	; 0x129c <KPD_u8GetPressedKey+0x134>
	else if (__tmp > 65535)
    121e:	6f 81       	ldd	r22, Y+7	; 0x07
    1220:	78 85       	ldd	r23, Y+8	; 0x08
    1222:	89 85       	ldd	r24, Y+9	; 0x09
    1224:	9a 85       	ldd	r25, Y+10	; 0x0a
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	3f ef       	ldi	r19, 0xFF	; 255
    122a:	4f e7       	ldi	r20, 0x7F	; 127
    122c:	57 e4       	ldi	r21, 0x47	; 71
    122e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1232:	18 16       	cp	r1, r24
    1234:	4c f5       	brge	.+82     	; 0x1288 <KPD_u8GetPressedKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1236:	6b 85       	ldd	r22, Y+11	; 0x0b
    1238:	7c 85       	ldd	r23, Y+12	; 0x0c
    123a:	8d 85       	ldd	r24, Y+13	; 0x0d
    123c:	9e 85       	ldd	r25, Y+14	; 0x0e
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e2       	ldi	r20, 0x20	; 32
    1244:	51 e4       	ldi	r21, 0x41	; 65
    1246:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	bc 01       	movw	r22, r24
    1250:	cd 01       	movw	r24, r26
    1252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	0f c0       	rjmp	.+30     	; 0x127e <KPD_u8GetPressedKey+0x116>
    1260:	88 ec       	ldi	r24, 0xC8	; 200
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	f1 f7       	brne	.-4      	; 0x126c <KPD_u8GetPressedKey+0x104>
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	9e 83       	std	Y+6, r25	; 0x06
    127c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	69 f7       	brne	.-38     	; 0x1260 <KPD_u8GetPressedKey+0xf8>
    1286:	14 c0       	rjmp	.+40     	; 0x12b0 <KPD_u8GetPressedKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1288:	6f 81       	ldd	r22, Y+7	; 0x07
    128a:	78 85       	ldd	r23, Y+8	; 0x08
    128c:	89 85       	ldd	r24, Y+9	; 0x09
    128e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9e 83       	std	Y+6, r25	; 0x06
    129a:	8d 83       	std	Y+5, r24	; 0x05
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <KPD_u8GetPressedKey+0x140>
    12ac:	9a 83       	std	Y+2, r25	; 0x02
    12ae:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms (10);
				while (DIO_u8GetPinValue (KPD_PORT, u8Row) == DIO_LOW);
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    12b4:	0e 94 33 08 	call	0x1066	; 0x1066 <DIO_u8GetPinValue>
    12b8:	88 23       	and	r24, r24
    12ba:	d1 f3       	breq	.-12     	; 0x12b0 <KPD_u8GetPressedKey+0x148>
	u8 u8Row;

	for (u8Col = 0; u8Col<4; u8Col++)
	{
		DIO_vidSetPinVal (KPD_PORT, u8Col, DIO_LOW);
		for (u8Row = 4; u8Row< 8; u8Row++)
    12bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	8f 87       	std	Y+15, r24	; 0x0f
    12c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c4:	88 30       	cpi	r24, 0x08	; 8
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <KPD_u8GetPressedKey+0x162>
    12c8:	65 cf       	rjmp	.-310    	; 0x1194 <KPD_u8GetPressedKey+0x2c>
				_delay_ms (10);
				while (DIO_u8GetPinValue (KPD_PORT, u8Row) == DIO_LOW);

			}
		}
		DIO_vidSetPinVal (KPD_PORT, u8Col, DIO_HIGH);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	68 89       	ldd	r22, Y+16	; 0x10
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
{
	u8 u8SwVal = NOT_PRESSED;    /*because if we don't press any key, garbage value doesn't be returned*/
	u8 u8Col;
	u8 u8Row;

	for (u8Col = 0; u8Col<4; u8Col++)
    12d4:	88 89       	ldd	r24, Y+16	; 0x10
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	88 8b       	std	Y+16, r24	; 0x10
    12da:	88 89       	ldd	r24, Y+16	; 0x10
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	08 f4       	brcc	.+2      	; 0x12e2 <KPD_u8GetPressedKey+0x17a>
    12e0:	51 cf       	rjmp	.-350    	; 0x1184 <KPD_u8GetPressedKey+0x1c>
		}
		DIO_vidSetPinVal (KPD_PORT, u8Col, DIO_HIGH);

	}

	return u8SwVal;
    12e2:	89 89       	ldd	r24, Y+17	; 0x11
}
    12e4:	61 96       	adiw	r28, 0x11	; 17
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <HLCD_vidInit>:
#include "LCD_CFG.h"



void HLCD_vidInit ( void)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	e8 97       	sbiw	r28, 0x38	; 56
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	8d ab       	std	Y+53, r24	; 0x35
    1314:	9e ab       	std	Y+54, r25	; 0x36
    1316:	af ab       	std	Y+55, r26	; 0x37
    1318:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131a:	6d a9       	ldd	r22, Y+53	; 0x35
    131c:	7e a9       	ldd	r23, Y+54	; 0x36
    131e:	8f a9       	ldd	r24, Y+55	; 0x37
    1320:	98 ad       	ldd	r25, Y+56	; 0x38
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4a ef       	ldi	r20, 0xFA	; 250
    1328:	54 e4       	ldi	r21, 0x44	; 68
    132a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	89 ab       	std	Y+49, r24	; 0x31
    1334:	9a ab       	std	Y+50, r25	; 0x32
    1336:	ab ab       	std	Y+51, r26	; 0x33
    1338:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    133a:	69 a9       	ldd	r22, Y+49	; 0x31
    133c:	7a a9       	ldd	r23, Y+50	; 0x32
    133e:	8b a9       	ldd	r24, Y+51	; 0x33
    1340:	9c a9       	ldd	r25, Y+52	; 0x34
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    134e:	88 23       	and	r24, r24
    1350:	2c f4       	brge	.+10     	; 0x135c <HLCD_vidInit+0x66>
		__ticks = 1;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	98 ab       	std	Y+48, r25	; 0x30
    1358:	8f a7       	std	Y+47, r24	; 0x2f
    135a:	3f c0       	rjmp	.+126    	; 0x13da <HLCD_vidInit+0xe4>
	else if (__tmp > 65535)
    135c:	69 a9       	ldd	r22, Y+49	; 0x31
    135e:	7a a9       	ldd	r23, Y+50	; 0x32
    1360:	8b a9       	ldd	r24, Y+51	; 0x33
    1362:	9c a9       	ldd	r25, Y+52	; 0x34
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	57 e4       	ldi	r21, 0x47	; 71
    136c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1370:	18 16       	cp	r1, r24
    1372:	4c f5       	brge	.+82     	; 0x13c6 <HLCD_vidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1374:	6d a9       	ldd	r22, Y+53	; 0x35
    1376:	7e a9       	ldd	r23, Y+54	; 0x36
    1378:	8f a9       	ldd	r24, Y+55	; 0x37
    137a:	98 ad       	ldd	r25, Y+56	; 0x38
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e2       	ldi	r20, 0x20	; 32
    1382:	51 e4       	ldi	r21, 0x41	; 65
    1384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	98 ab       	std	Y+48, r25	; 0x30
    139a:	8f a7       	std	Y+47, r24	; 0x2f
    139c:	0f c0       	rjmp	.+30     	; 0x13bc <HLCD_vidInit+0xc6>
    139e:	88 ec       	ldi	r24, 0xC8	; 200
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9e a7       	std	Y+46, r25	; 0x2e
    13a4:	8d a7       	std	Y+45, r24	; 0x2d
    13a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    13a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <HLCD_vidInit+0xb4>
    13ae:	9e a7       	std	Y+46, r25	; 0x2e
    13b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b4:	98 a9       	ldd	r25, Y+48	; 0x30
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	98 ab       	std	Y+48, r25	; 0x30
    13ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    13be:	98 a9       	ldd	r25, Y+48	; 0x30
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	69 f7       	brne	.-38     	; 0x139e <HLCD_vidInit+0xa8>
    13c4:	14 c0       	rjmp	.+40     	; 0x13ee <HLCD_vidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c6:	69 a9       	ldd	r22, Y+49	; 0x31
    13c8:	7a a9       	ldd	r23, Y+50	; 0x32
    13ca:	8b a9       	ldd	r24, Y+51	; 0x33
    13cc:	9c a9       	ldd	r25, Y+52	; 0x34
    13ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	98 ab       	std	Y+48, r25	; 0x30
    13d8:	8f a7       	std	Y+47, r24	; 0x2f
    13da:	8f a5       	ldd	r24, Y+47	; 0x2f
    13dc:	98 a9       	ldd	r25, Y+48	; 0x30
    13de:	9c a7       	std	Y+44, r25	; 0x2c
    13e0:	8b a7       	std	Y+43, r24	; 0x2b
    13e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <HLCD_vidInit+0xf0>
    13ea:	9c a7       	std	Y+44, r25	; 0x2c
    13ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(0);
	HLCD_vidsendCMD(LCD_FUNCSET_8BIT);
    13ee:	88 e3       	ldi	r24, 0x38	; 56
    13f0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <HLCD_vidsendCMD>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a0 e8       	ldi	r26, 0x80	; 128
    13fa:	bf e3       	ldi	r27, 0x3F	; 63
    13fc:	8f a3       	std	Y+39, r24	; 0x27
    13fe:	98 a7       	std	Y+40, r25	; 0x28
    1400:	a9 a7       	std	Y+41, r26	; 0x29
    1402:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1404:	6f a1       	ldd	r22, Y+39	; 0x27
    1406:	78 a5       	ldd	r23, Y+40	; 0x28
    1408:	89 a5       	ldd	r24, Y+41	; 0x29
    140a:	9a a5       	ldd	r25, Y+42	; 0x2a
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	4a ef       	ldi	r20, 0xFA	; 250
    1412:	54 e4       	ldi	r21, 0x44	; 68
    1414:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	8b a3       	std	Y+35, r24	; 0x23
    141e:	9c a3       	std	Y+36, r25	; 0x24
    1420:	ad a3       	std	Y+37, r26	; 0x25
    1422:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1424:	6b a1       	ldd	r22, Y+35	; 0x23
    1426:	7c a1       	ldd	r23, Y+36	; 0x24
    1428:	8d a1       	ldd	r24, Y+37	; 0x25
    142a:	9e a1       	ldd	r25, Y+38	; 0x26
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	5f e3       	ldi	r21, 0x3F	; 63
    1434:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1438:	88 23       	and	r24, r24
    143a:	2c f4       	brge	.+10     	; 0x1446 <HLCD_vidInit+0x150>
		__ticks = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9a a3       	std	Y+34, r25	; 0x22
    1442:	89 a3       	std	Y+33, r24	; 0x21
    1444:	3f c0       	rjmp	.+126    	; 0x14c4 <HLCD_vidInit+0x1ce>
	else if (__tmp > 65535)
    1446:	6b a1       	ldd	r22, Y+35	; 0x23
    1448:	7c a1       	ldd	r23, Y+36	; 0x24
    144a:	8d a1       	ldd	r24, Y+37	; 0x25
    144c:	9e a1       	ldd	r25, Y+38	; 0x26
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	3f ef       	ldi	r19, 0xFF	; 255
    1452:	4f e7       	ldi	r20, 0x7F	; 127
    1454:	57 e4       	ldi	r21, 0x47	; 71
    1456:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    145a:	18 16       	cp	r1, r24
    145c:	4c f5       	brge	.+82     	; 0x14b0 <HLCD_vidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145e:	6f a1       	ldd	r22, Y+39	; 0x27
    1460:	78 a5       	ldd	r23, Y+40	; 0x28
    1462:	89 a5       	ldd	r24, Y+41	; 0x29
    1464:	9a a5       	ldd	r25, Y+42	; 0x2a
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e2       	ldi	r20, 0x20	; 32
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	9a a3       	std	Y+34, r25	; 0x22
    1484:	89 a3       	std	Y+33, r24	; 0x21
    1486:	0f c0       	rjmp	.+30     	; 0x14a6 <HLCD_vidInit+0x1b0>
    1488:	88 ec       	ldi	r24, 0xC8	; 200
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	98 a3       	std	Y+32, r25	; 0x20
    148e:	8f 8f       	std	Y+31, r24	; 0x1f
    1490:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1492:	98 a1       	ldd	r25, Y+32	; 0x20
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <HLCD_vidInit+0x19e>
    1498:	98 a3       	std	Y+32, r25	; 0x20
    149a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149c:	89 a1       	ldd	r24, Y+33	; 0x21
    149e:	9a a1       	ldd	r25, Y+34	; 0x22
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	9a a3       	std	Y+34, r25	; 0x22
    14a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a6:	89 a1       	ldd	r24, Y+33	; 0x21
    14a8:	9a a1       	ldd	r25, Y+34	; 0x22
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	69 f7       	brne	.-38     	; 0x1488 <HLCD_vidInit+0x192>
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <HLCD_vidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b0:	6b a1       	ldd	r22, Y+35	; 0x23
    14b2:	7c a1       	ldd	r23, Y+36	; 0x24
    14b4:	8d a1       	ldd	r24, Y+37	; 0x25
    14b6:	9e a1       	ldd	r25, Y+38	; 0x26
    14b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	9a a3       	std	Y+34, r25	; 0x22
    14c2:	89 a3       	std	Y+33, r24	; 0x21
    14c4:	89 a1       	ldd	r24, Y+33	; 0x21
    14c6:	9a a1       	ldd	r25, Y+34	; 0x22
    14c8:	9e 8f       	std	Y+30, r25	; 0x1e
    14ca:	8d 8f       	std	Y+29, r24	; 0x1d
    14cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <HLCD_vidInit+0x1da>
    14d4:	9e 8f       	std	Y+30, r25	; 0x1e
    14d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_vidsendCMD (LCD_DISPON_CURSON);
    14d8:	8e e0       	ldi	r24, 0x0E	; 14
    14da:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <HLCD_vidsendCMD>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 e8       	ldi	r26, 0x80	; 128
    14e4:	bf e3       	ldi	r27, 0x3F	; 63
    14e6:	89 8f       	std	Y+25, r24	; 0x19
    14e8:	9a 8f       	std	Y+26, r25	; 0x1a
    14ea:	ab 8f       	std	Y+27, r26	; 0x1b
    14ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ee:	69 8d       	ldd	r22, Y+25	; 0x19
    14f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	4a ef       	ldi	r20, 0xFA	; 250
    14fc:	54 e4       	ldi	r21, 0x44	; 68
    14fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	8d 8b       	std	Y+21, r24	; 0x15
    1508:	9e 8b       	std	Y+22, r25	; 0x16
    150a:	af 8b       	std	Y+23, r26	; 0x17
    150c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    150e:	6d 89       	ldd	r22, Y+21	; 0x15
    1510:	7e 89       	ldd	r23, Y+22	; 0x16
    1512:	8f 89       	ldd	r24, Y+23	; 0x17
    1514:	98 8d       	ldd	r25, Y+24	; 0x18
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e8       	ldi	r20, 0x80	; 128
    151c:	5f e3       	ldi	r21, 0x3F	; 63
    151e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1522:	88 23       	and	r24, r24
    1524:	2c f4       	brge	.+10     	; 0x1530 <HLCD_vidInit+0x23a>
		__ticks = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	9c 8b       	std	Y+20, r25	; 0x14
    152c:	8b 8b       	std	Y+19, r24	; 0x13
    152e:	3f c0       	rjmp	.+126    	; 0x15ae <HLCD_vidInit+0x2b8>
	else if (__tmp > 65535)
    1530:	6d 89       	ldd	r22, Y+21	; 0x15
    1532:	7e 89       	ldd	r23, Y+22	; 0x16
    1534:	8f 89       	ldd	r24, Y+23	; 0x17
    1536:	98 8d       	ldd	r25, Y+24	; 0x18
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	3f ef       	ldi	r19, 0xFF	; 255
    153c:	4f e7       	ldi	r20, 0x7F	; 127
    153e:	57 e4       	ldi	r21, 0x47	; 71
    1540:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1544:	18 16       	cp	r1, r24
    1546:	4c f5       	brge	.+82     	; 0x159a <HLCD_vidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1548:	69 8d       	ldd	r22, Y+25	; 0x19
    154a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    154c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    154e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e2       	ldi	r20, 0x20	; 32
    1556:	51 e4       	ldi	r21, 0x41	; 65
    1558:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	9c 8b       	std	Y+20, r25	; 0x14
    156e:	8b 8b       	std	Y+19, r24	; 0x13
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <HLCD_vidInit+0x29a>
    1572:	88 ec       	ldi	r24, 0xC8	; 200
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9a 8b       	std	Y+18, r25	; 0x12
    1578:	89 8b       	std	Y+17, r24	; 0x11
    157a:	89 89       	ldd	r24, Y+17	; 0x11
    157c:	9a 89       	ldd	r25, Y+18	; 0x12
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <HLCD_vidInit+0x288>
    1582:	9a 8b       	std	Y+18, r25	; 0x12
    1584:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
    1588:	9c 89       	ldd	r25, Y+20	; 0x14
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	9c 8b       	std	Y+20, r25	; 0x14
    158e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1590:	8b 89       	ldd	r24, Y+19	; 0x13
    1592:	9c 89       	ldd	r25, Y+20	; 0x14
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	69 f7       	brne	.-38     	; 0x1572 <HLCD_vidInit+0x27c>
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <HLCD_vidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159a:	6d 89       	ldd	r22, Y+21	; 0x15
    159c:	7e 89       	ldd	r23, Y+22	; 0x16
    159e:	8f 89       	ldd	r24, Y+23	; 0x17
    15a0:	98 8d       	ldd	r25, Y+24	; 0x18
    15a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	9c 8b       	std	Y+20, r25	; 0x14
    15ac:	8b 8b       	std	Y+19, r24	; 0x13
    15ae:	8b 89       	ldd	r24, Y+19	; 0x13
    15b0:	9c 89       	ldd	r25, Y+20	; 0x14
    15b2:	98 8b       	std	Y+16, r25	; 0x10
    15b4:	8f 87       	std	Y+15, r24	; 0x0f
    15b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b8:	98 89       	ldd	r25, Y+16	; 0x10
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <HLCD_vidInit+0x2c4>
    15be:	98 8b       	std	Y+16, r25	; 0x10
    15c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_vidsendCMD (LCD_CLR);
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <HLCD_vidsendCMD>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a0 e8       	ldi	r26, 0x80	; 128
    15ce:	bf e3       	ldi	r27, 0x3F	; 63
    15d0:	8b 87       	std	Y+11, r24	; 0x0b
    15d2:	9c 87       	std	Y+12, r25	; 0x0c
    15d4:	ad 87       	std	Y+13, r26	; 0x0d
    15d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15da:	7c 85       	ldd	r23, Y+12	; 0x0c
    15dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15de:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4a ef       	ldi	r20, 0xFA	; 250
    15e6:	54 e4       	ldi	r21, 0x44	; 68
    15e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	8f 83       	std	Y+7, r24	; 0x07
    15f2:	98 87       	std	Y+8, r25	; 0x08
    15f4:	a9 87       	std	Y+9, r26	; 0x09
    15f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f8:	6f 81       	ldd	r22, Y+7	; 0x07
    15fa:	78 85       	ldd	r23, Y+8	; 0x08
    15fc:	89 85       	ldd	r24, Y+9	; 0x09
    15fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e8       	ldi	r20, 0x80	; 128
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    160c:	88 23       	and	r24, r24
    160e:	2c f4       	brge	.+10     	; 0x161a <HLCD_vidInit+0x324>
		__ticks = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	3f c0       	rjmp	.+126    	; 0x1698 <HLCD_vidInit+0x3a2>
	else if (__tmp > 65535)
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	3f ef       	ldi	r19, 0xFF	; 255
    1626:	4f e7       	ldi	r20, 0x7F	; 127
    1628:	57 e4       	ldi	r21, 0x47	; 71
    162a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    162e:	18 16       	cp	r1, r24
    1630:	4c f5       	brge	.+82     	; 0x1684 <HLCD_vidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1632:	6b 85       	ldd	r22, Y+11	; 0x0b
    1634:	7c 85       	ldd	r23, Y+12	; 0x0c
    1636:	8d 85       	ldd	r24, Y+13	; 0x0d
    1638:	9e 85       	ldd	r25, Y+14	; 0x0e
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 83       	std	Y+5, r24	; 0x05
    165a:	0f c0       	rjmp	.+30     	; 0x167a <HLCD_vidInit+0x384>
    165c:	88 ec       	ldi	r24, 0xC8	; 200
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <HLCD_vidInit+0x372>
    166c:	9c 83       	std	Y+4, r25	; 0x04
    166e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	69 f7       	brne	.-38     	; 0x165c <HLCD_vidInit+0x366>
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <HLCD_vidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	8d 83       	std	Y+5, r24	; 0x05
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <HLCD_vidInit+0x3ae>
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	HLCD_vidsendCMD (LCD_ENTRYMODE);
    16ac:	86 e0       	ldi	r24, 0x06	; 6
    16ae:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <HLCD_vidsendCMD>

}
    16b2:	e8 96       	adiw	r28, 0x38	; 56
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <HLCD_vidsendCMD>:


void HLCD_vidsendCMD (u8 Copy_u8CMD)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	89 83       	std	Y+1, r24	; 0x01
	//CLEAR RS PIN
	DIO_vidSetPinVal (LCD_RS_PORT, DIO_PIN0, DIO_LOW);
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
	//CLEAR RW PIN
	DIO_vidSetPinVal (LCD_RW_PORT, LCD_RW_PIN, DIO_LOW);
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
	//SET E PIN TO HIGH
	DIO_vidSetPinVal(LCD_E_PORT,LCD_E_PIN ,DIO_HIGH);
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    16ea:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
	//LOAD THE COMMAND
	DIO_vidSetPortVal (LCD_DATA_PORT, Copy_u8CMD);
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	69 81       	ldd	r22, Y+1	; 0x01
    16f2:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_vidSetPortVal>
	//CLEAR E PIN
	DIO_vidSetPinVal(LCD_E_PORT,LCD_E_PIN ,DIO_LOW);
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
}
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <HLCD_vidsendChar>:


void HLCD_vidsendChar (u8 Copy_u8Char)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	e9 97       	sbiw	r28, 0x39	; 57
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	89 af       	std	Y+57, r24	; 0x39
	//SET RS PIN (data mode)
	DIO_vidSetPinVal(LCD_RS_PORT,LCD_RS_PIN ,DIO_HIGH);
    171e:	82 e0       	ldi	r24, 0x02	; 2
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a0 e8       	ldi	r26, 0x80	; 128
    172e:	bf e3       	ldi	r27, 0x3F	; 63
    1730:	8d ab       	std	Y+53, r24	; 0x35
    1732:	9e ab       	std	Y+54, r25	; 0x36
    1734:	af ab       	std	Y+55, r26	; 0x37
    1736:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	6d a9       	ldd	r22, Y+53	; 0x35
    173a:	7e a9       	ldd	r23, Y+54	; 0x36
    173c:	8f a9       	ldd	r24, Y+55	; 0x37
    173e:	98 ad       	ldd	r25, Y+56	; 0x38
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4a ef       	ldi	r20, 0xFA	; 250
    1746:	54 e4       	ldi	r21, 0x44	; 68
    1748:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	89 ab       	std	Y+49, r24	; 0x31
    1752:	9a ab       	std	Y+50, r25	; 0x32
    1754:	ab ab       	std	Y+51, r26	; 0x33
    1756:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1758:	69 a9       	ldd	r22, Y+49	; 0x31
    175a:	7a a9       	ldd	r23, Y+50	; 0x32
    175c:	8b a9       	ldd	r24, Y+51	; 0x33
    175e:	9c a9       	ldd	r25, Y+52	; 0x34
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    176c:	88 23       	and	r24, r24
    176e:	2c f4       	brge	.+10     	; 0x177a <HLCD_vidsendChar+0x72>
		__ticks = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	98 ab       	std	Y+48, r25	; 0x30
    1776:	8f a7       	std	Y+47, r24	; 0x2f
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <HLCD_vidsendChar+0xf0>
	else if (__tmp > 65535)
    177a:	69 a9       	ldd	r22, Y+49	; 0x31
    177c:	7a a9       	ldd	r23, Y+50	; 0x32
    177e:	8b a9       	ldd	r24, Y+51	; 0x33
    1780:	9c a9       	ldd	r25, Y+52	; 0x34
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	4c f5       	brge	.+82     	; 0x17e4 <HLCD_vidsendChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	6d a9       	ldd	r22, Y+53	; 0x35
    1794:	7e a9       	ldd	r23, Y+54	; 0x36
    1796:	8f a9       	ldd	r24, Y+55	; 0x37
    1798:	98 ad       	ldd	r25, Y+56	; 0x38
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	98 ab       	std	Y+48, r25	; 0x30
    17b8:	8f a7       	std	Y+47, r24	; 0x2f
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <HLCD_vidsendChar+0xd2>
    17bc:	88 ec       	ldi	r24, 0xC8	; 200
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9e a7       	std	Y+46, r25	; 0x2e
    17c2:	8d a7       	std	Y+45, r24	; 0x2d
    17c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    17c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <HLCD_vidsendChar+0xc0>
    17cc:	9e a7       	std	Y+46, r25	; 0x2e
    17ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d2:	98 a9       	ldd	r25, Y+48	; 0x30
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	98 ab       	std	Y+48, r25	; 0x30
    17d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17da:	8f a5       	ldd	r24, Y+47	; 0x2f
    17dc:	98 a9       	ldd	r25, Y+48	; 0x30
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	69 f7       	brne	.-38     	; 0x17bc <HLCD_vidsendChar+0xb4>
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <HLCD_vidsendChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e4:	69 a9       	ldd	r22, Y+49	; 0x31
    17e6:	7a a9       	ldd	r23, Y+50	; 0x32
    17e8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ea:	9c a9       	ldd	r25, Y+52	; 0x34
    17ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	98 ab       	std	Y+48, r25	; 0x30
    17f6:	8f a7       	std	Y+47, r24	; 0x2f
    17f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17fa:	98 a9       	ldd	r25, Y+48	; 0x30
    17fc:	9c a7       	std	Y+44, r25	; 0x2c
    17fe:	8b a7       	std	Y+43, r24	; 0x2b
    1800:	8b a5       	ldd	r24, Y+43	; 0x2b
    1802:	9c a5       	ldd	r25, Y+44	; 0x2c
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <HLCD_vidsendChar+0xfc>
    1808:	9c a7       	std	Y+44, r25	; 0x2c
    180a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	//clear RW PIN(Write mode)
	DIO_vidSetPinVal(LCD_RW_PORT,LCD_RW_PIN ,DIO_LOW);
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e8       	ldi	r26, 0x80	; 128
    181c:	bf e3       	ldi	r27, 0x3F	; 63
    181e:	8f a3       	std	Y+39, r24	; 0x27
    1820:	98 a7       	std	Y+40, r25	; 0x28
    1822:	a9 a7       	std	Y+41, r26	; 0x29
    1824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	6f a1       	ldd	r22, Y+39	; 0x27
    1828:	78 a5       	ldd	r23, Y+40	; 0x28
    182a:	89 a5       	ldd	r24, Y+41	; 0x29
    182c:	9a a5       	ldd	r25, Y+42	; 0x2a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a ef       	ldi	r20, 0xFA	; 250
    1834:	54 e4       	ldi	r21, 0x44	; 68
    1836:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8b a3       	std	Y+35, r24	; 0x23
    1840:	9c a3       	std	Y+36, r25	; 0x24
    1842:	ad a3       	std	Y+37, r26	; 0x25
    1844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1846:	6b a1       	ldd	r22, Y+35	; 0x23
    1848:	7c a1       	ldd	r23, Y+36	; 0x24
    184a:	8d a1       	ldd	r24, Y+37	; 0x25
    184c:	9e a1       	ldd	r25, Y+38	; 0x26
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    185a:	88 23       	and	r24, r24
    185c:	2c f4       	brge	.+10     	; 0x1868 <HLCD_vidsendChar+0x160>
		__ticks = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9a a3       	std	Y+34, r25	; 0x22
    1864:	89 a3       	std	Y+33, r24	; 0x21
    1866:	3f c0       	rjmp	.+126    	; 0x18e6 <HLCD_vidsendChar+0x1de>
	else if (__tmp > 65535)
    1868:	6b a1       	ldd	r22, Y+35	; 0x23
    186a:	7c a1       	ldd	r23, Y+36	; 0x24
    186c:	8d a1       	ldd	r24, Y+37	; 0x25
    186e:	9e a1       	ldd	r25, Y+38	; 0x26
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	4c f5       	brge	.+82     	; 0x18d2 <HLCD_vidsendChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	6f a1       	ldd	r22, Y+39	; 0x27
    1882:	78 a5       	ldd	r23, Y+40	; 0x28
    1884:	89 a5       	ldd	r24, Y+41	; 0x29
    1886:	9a a5       	ldd	r25, Y+42	; 0x2a
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9a a3       	std	Y+34, r25	; 0x22
    18a6:	89 a3       	std	Y+33, r24	; 0x21
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <HLCD_vidsendChar+0x1c0>
    18aa:	88 ec       	ldi	r24, 0xC8	; 200
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	98 a3       	std	Y+32, r25	; 0x20
    18b0:	8f 8f       	std	Y+31, r24	; 0x1f
    18b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18b4:	98 a1       	ldd	r25, Y+32	; 0x20
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <HLCD_vidsendChar+0x1ae>
    18ba:	98 a3       	std	Y+32, r25	; 0x20
    18bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	89 a1       	ldd	r24, Y+33	; 0x21
    18c0:	9a a1       	ldd	r25, Y+34	; 0x22
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	9a a3       	std	Y+34, r25	; 0x22
    18c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ca:	9a a1       	ldd	r25, Y+34	; 0x22
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	69 f7       	brne	.-38     	; 0x18aa <HLCD_vidsendChar+0x1a2>
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <HLCD_vidsendChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	6b a1       	ldd	r22, Y+35	; 0x23
    18d4:	7c a1       	ldd	r23, Y+36	; 0x24
    18d6:	8d a1       	ldd	r24, Y+37	; 0x25
    18d8:	9e a1       	ldd	r25, Y+38	; 0x26
    18da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9a a3       	std	Y+34, r25	; 0x22
    18e4:	89 a3       	std	Y+33, r24	; 0x21
    18e6:	89 a1       	ldd	r24, Y+33	; 0x21
    18e8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ea:	9e 8f       	std	Y+30, r25	; 0x1e
    18ec:	8d 8f       	std	Y+29, r24	; 0x1d
    18ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <HLCD_vidsendChar+0x1ea>
    18f6:	9e 8f       	std	Y+30, r25	; 0x1e
    18f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//SET E PIN TO HIGH
	DIO_vidSetPinVal(LCD_E_PORT,LCD_E_PIN ,DIO_HIGH);
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	62 e0       	ldi	r22, 0x02	; 2
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e8       	ldi	r26, 0x80	; 128
    190a:	bf e3       	ldi	r27, 0x3F	; 63
    190c:	89 8f       	std	Y+25, r24	; 0x19
    190e:	9a 8f       	std	Y+26, r25	; 0x1a
    1910:	ab 8f       	std	Y+27, r26	; 0x1b
    1912:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	69 8d       	ldd	r22, Y+25	; 0x19
    1916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a ef       	ldi	r20, 0xFA	; 250
    1922:	54 e4       	ldi	r21, 0x44	; 68
    1924:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8d 8b       	std	Y+21, r24	; 0x15
    192e:	9e 8b       	std	Y+22, r25	; 0x16
    1930:	af 8b       	std	Y+23, r26	; 0x17
    1932:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	8f 89       	ldd	r24, Y+23	; 0x17
    193a:	98 8d       	ldd	r25, Y+24	; 0x18
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <HLCD_vidsendChar+0x24e>
		__ticks = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9c 8b       	std	Y+20, r25	; 0x14
    1952:	8b 8b       	std	Y+19, r24	; 0x13
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <HLCD_vidsendChar+0x2cc>
	else if (__tmp > 65535)
    1956:	6d 89       	ldd	r22, Y+21	; 0x15
    1958:	7e 89       	ldd	r23, Y+22	; 0x16
    195a:	8f 89       	ldd	r24, Y+23	; 0x17
    195c:	98 8d       	ldd	r25, Y+24	; 0x18
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <HLCD_vidsendChar+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	69 8d       	ldd	r22, Y+25	; 0x19
    1970:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1972:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1974:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9c 8b       	std	Y+20, r25	; 0x14
    1994:	8b 8b       	std	Y+19, r24	; 0x13
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <HLCD_vidsendChar+0x2ae>
    1998:	88 ec       	ldi	r24, 0xC8	; 200
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
    19a0:	89 89       	ldd	r24, Y+17	; 0x11
    19a2:	9a 89       	ldd	r25, Y+18	; 0x12
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <HLCD_vidsendChar+0x29c>
    19a8:	9a 8b       	std	Y+18, r25	; 0x12
    19aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	8b 89       	ldd	r24, Y+19	; 0x13
    19ae:	9c 89       	ldd	r25, Y+20	; 0x14
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9c 8b       	std	Y+20, r25	; 0x14
    19b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	8b 89       	ldd	r24, Y+19	; 0x13
    19b8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <HLCD_vidsendChar+0x290>
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <HLCD_vidsendChar+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	6d 89       	ldd	r22, Y+21	; 0x15
    19c2:	7e 89       	ldd	r23, Y+22	; 0x16
    19c4:	8f 89       	ldd	r24, Y+23	; 0x17
    19c6:	98 8d       	ldd	r25, Y+24	; 0x18
    19c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9c 8b       	std	Y+20, r25	; 0x14
    19d2:	8b 8b       	std	Y+19, r24	; 0x13
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
    19dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19de:	98 89       	ldd	r25, Y+16	; 0x10
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <HLCD_vidsendChar+0x2d8>
    19e4:	98 8b       	std	Y+16, r25	; 0x10
    19e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	//LOAD THE COMMAND
	DIO_vidSetPortVal(LCD_DATA_PORT, Copy_u8Char);
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	69 ad       	ldd	r22, Y+57	; 0x39
    19ec:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_vidSetPortVal>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a0 e8       	ldi	r26, 0x80	; 128
    19f6:	bf e3       	ldi	r27, 0x3F	; 63
    19f8:	8b 87       	std	Y+11, r24	; 0x0b
    19fa:	9c 87       	std	Y+12, r25	; 0x0c
    19fc:	ad 87       	std	Y+13, r26	; 0x0d
    19fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a ef       	ldi	r20, 0xFA	; 250
    1a0e:	54 e4       	ldi	r21, 0x44	; 68
    1a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	8f 83       	std	Y+7, r24	; 0x07
    1a1a:	98 87       	std	Y+8, r25	; 0x08
    1a1c:	a9 87       	std	Y+9, r26	; 0x09
    1a1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e8       	ldi	r20, 0x80	; 128
    1a2e:	5f e3       	ldi	r21, 0x3F	; 63
    1a30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a34:	88 23       	and	r24, r24
    1a36:	2c f4       	brge	.+10     	; 0x1a42 <HLCD_vidsendChar+0x33a>
		__ticks = 1;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	3f c0       	rjmp	.+126    	; 0x1ac0 <HLCD_vidsendChar+0x3b8>
	else if (__tmp > 65535)
    1a42:	6f 81       	ldd	r22, Y+7	; 0x07
    1a44:	78 85       	ldd	r23, Y+8	; 0x08
    1a46:	89 85       	ldd	r24, Y+9	; 0x09
    1a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	3f ef       	ldi	r19, 0xFF	; 255
    1a4e:	4f e7       	ldi	r20, 0x7F	; 127
    1a50:	57 e4       	ldi	r21, 0x47	; 71
    1a52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	4c f5       	brge	.+82     	; 0x1aac <HLCD_vidsendChar+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e2       	ldi	r20, 0x20	; 32
    1a68:	51 e4       	ldi	r21, 0x41	; 65
    1a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <HLCD_vidsendChar+0x39a>
    1a84:	88 ec       	ldi	r24, 0xC8	; 200
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9c 83       	std	Y+4, r25	; 0x04
    1a8a:	8b 83       	std	Y+3, r24	; 0x03
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <HLCD_vidsendChar+0x388>
    1a94:	9c 83       	std	Y+4, r25	; 0x04
    1a96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	69 f7       	brne	.-38     	; 0x1a84 <HLCD_vidsendChar+0x37c>
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <HLCD_vidsendChar+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aac:	6f 81       	ldd	r22, Y+7	; 0x07
    1aae:	78 85       	ldd	r23, Y+8	; 0x08
    1ab0:	89 85       	ldd	r24, Y+9	; 0x09
    1ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <HLCD_vidsendChar+0x3c4>
    1ad0:	9a 83       	std	Y+2, r25	; 0x02
    1ad2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (1);
	//CLEAR E PIN
	DIO_vidSetPinVal(LCD_E_PORT,LCD_E_PIN ,DIO_LOW);
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	62 e0       	ldi	r22, 0x02	; 2
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPinVal>
	//I think there should be delay here...!////////////////////////////////////////////////////
}
    1ade:	e9 96       	adiw	r28, 0x39	; 57
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <HLCD_vidWriteStr>:



void HLCD_vidWriteStr (u8* pu8str)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	61 97       	sbiw	r28, 0x11	; 17
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	99 8b       	std	Y+17, r25	; 0x11
    1b06:	88 8b       	std	Y+16, r24	; 0x10
	u8 i =0;
    1b08:	1f 86       	std	Y+15, r1	; 0x0f
    1b0a:	80 c0       	rjmp	.+256    	; 0x1c0c <HLCD_vidWriteStr+0x11c>
	while (pu8str[i] != '\0' /*or != 0 */)           // where did he declares that this is an array? he only declared about pointer!////////////////////////////////////////////////////////////
	                                              // i think because here, in the implementation, i pass a pointer, that means when i call this function in the main i should pass an address to it, and for sure, the name of any array is an address to its first location////////right?//////////////////////////////////////////////////////////
	{
		 HLCD_vidsendChar (pu8str[i]);
    1b0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	88 89       	ldd	r24, Y+16	; 0x10
    1b14:	99 89       	ldd	r25, Y+17	; 0x11
    1b16:	fc 01       	movw	r30, r24
    1b18:	e2 0f       	add	r30, r18
    1b1a:	f3 1f       	adc	r31, r19
    1b1c:	80 81       	ld	r24, Z
    1b1e:	0e 94 84 0b 	call	0x1708	; 0x1708 <HLCD_vidsendChar>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a0 e8       	ldi	r26, 0x80	; 128
    1b28:	bf e3       	ldi	r27, 0x3F	; 63
    1b2a:	8b 87       	std	Y+11, r24	; 0x0b
    1b2c:	9c 87       	std	Y+12, r25	; 0x0c
    1b2e:	ad 87       	std	Y+13, r26	; 0x0d
    1b30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8f 83       	std	Y+7, r24	; 0x07
    1b4c:	98 87       	std	Y+8, r25	; 0x08
    1b4e:	a9 87       	std	Y+9, r26	; 0x09
    1b50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <HLCD_vidWriteStr+0x84>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <HLCD_vidWriteStr+0x102>
	else if (__tmp > 65535)
    1b74:	6f 81       	ldd	r22, Y+7	; 0x07
    1b76:	78 85       	ldd	r23, Y+8	; 0x08
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <HLCD_vidWriteStr+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <HLCD_vidWriteStr+0xe4>
    1bb6:	88 ec       	ldi	r24, 0xC8	; 200
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	8b 83       	std	Y+3, r24	; 0x03
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <HLCD_vidWriteStr+0xd2>
    1bc6:	9c 83       	std	Y+4, r25	; 0x04
    1bc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <HLCD_vidWriteStr+0xc6>
    1bdc:	14 c0       	rjmp	.+40     	; 0x1c06 <HLCD_vidWriteStr+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6f 81       	ldd	r22, Y+7	; 0x07
    1be0:	78 85       	ldd	r23, Y+8	; 0x08
    1be2:	89 85       	ldd	r24, Y+9	; 0x09
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <HLCD_vidWriteStr+0x10e>
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms (1);                       // why did he put this delay?    /////////////////////////////////////////////////////////////////////////
		 i++;
    1c06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c08:	8f 5f       	subi	r24, 0xFF	; 255
    1c0a:	8f 87       	std	Y+15, r24	; 0x0f


void HLCD_vidWriteStr (u8* pu8str)
{
	u8 i =0;
	while (pu8str[i] != '\0' /*or != 0 */)           // where did he declares that this is an array? he only declared about pointer!////////////////////////////////////////////////////////////
    1c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	88 89       	ldd	r24, Y+16	; 0x10
    1c14:	99 89       	ldd	r25, Y+17	; 0x11
    1c16:	fc 01       	movw	r30, r24
    1c18:	e2 0f       	add	r30, r18
    1c1a:	f3 1f       	adc	r31, r19
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 23       	and	r24, r24
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <HLCD_vidWriteStr+0x134>
    1c22:	74 cf       	rjmp	.-280    	; 0x1b0c <HLCD_vidWriteStr+0x1c>
	{
		 HLCD_vidsendChar (pu8str[i]);
		 _delay_ms (1);                       // why did he put this delay?    /////////////////////////////////////////////////////////////////////////
		 i++;
	}
}
    1c24:	61 96       	adiw	r28, 0x11	; 17
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <HLCD_vidGoToXY>:




void HLCD_vidGoToXY(u8 x, u8 y)                    // I didn't recognize what he has done here (need some illustration)////////////////////////////////////////////////////////////////////////////
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <HLCD_vidGoToXY+0x6>
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	6a 83       	std	Y+2, r22	; 0x02
	if (y==0)
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	88 23       	and	r24, r24
    1c48:	29 f4       	brne	.+10     	; 0x1c54 <HLCD_vidGoToXY+0x1e>
	{
		HLCD_vidsendCMD (x | LCD_SETCURSOR );
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	80 68       	ori	r24, 0x80	; 128
    1c4e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <HLCD_vidsendCMD>
    1c52:	08 c0       	rjmp	.+16     	; 0x1c64 <HLCD_vidGoToXY+0x2e>
	}
	else if (y==1)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	29 f4       	brne	.+10     	; 0x1c64 <HLCD_vidGoToXY+0x2e>
	{
		HLCD_vidsendCMD((x+0x40) | LCD_SETCURSOR );
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	80 5c       	subi	r24, 0xC0	; 192
    1c5e:	80 68       	ori	r24, 0x80	; 128
    1c60:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <HLCD_vidsendCMD>
	}
	else
	{
		return ;
	}
}
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <main>:
/*KPD*/
#include "KPD_interface.h"


int main ()
{
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	a6 97       	sbiw	r28, 0x26	; 38
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61

	// initialozation zone
	DIO_vidSetPortDir(DIO_PORTB,0x0F);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	6f e0       	ldi	r22, 0x0F	; 15
    1c8a:	0e 94 ef 07 	call	0xfde	; 0xfde <DIO_vidSetPortDir>
	DIO_vidSetPortDir(DIO_PORTD,PORT_OUTPUT);
    1c8e:	83 e0       	ldi	r24, 0x03	; 3
    1c90:	6f ef       	ldi	r22, 0xFF	; 255
    1c92:	0e 94 ef 07 	call	0xfde	; 0xfde <DIO_vidSetPortDir>



	DIO_vidSetPinDir (DIO_PORTC, DIO_PIN0, DIO_OUTPUT);
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir (DIO_PORTC, DIO_PIN1, DIO_OUTPUT);
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir (DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	62 e0       	ldi	r22, 0x02	; 2
    1cae:	41 e0       	ldi	r20, 0x01	; 1
    1cb0:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_vidSetPinDir>
	u8 key;                                             // act as temp variable because key won't save the variable to store the data to be monitored on the screen.
	u8 NUM1[5];
	u8 NUM2[5];
	u8 count;
	u8 flag = 0;
    1cb4:	1e 86       	std	Y+14, r1	; 0x0e
	u8 operation;
	u16 res;
	u16 rr [5];

	//set input pins pullup
	DIO_vidSetPortVal (DIO_PORTB,0xF0 );
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	60 ef       	ldi	r22, 0xF0	; 240
    1cba:	0e 94 ab 07 	call	0xf56	; 0xf56 <DIO_vidSetPortVal>

	/* Init LCD */
	HLCD_vidInit();
    1cbe:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <HLCD_vidInit>

	// supper loop zone

	while (1)
	{
		key = KPD_u8GetPressedKey ();
    1cc2:	0e 94 b4 08 	call	0x1168	; 0x1168 <KPD_u8GetPressedKey>
    1cc6:	88 8b       	std	Y+16, r24	; 0x10
		//HLCD_vidsendChar(key);                     // this action will result in infinity loop of printing
		if(key != NOT_PRESSED)
    1cc8:	88 89       	ldd	r24, Y+16	; 0x10
    1cca:	8f 3f       	cpi	r24, 0xFF	; 255
    1ccc:	d1 f3       	breq	.-12     	; 0x1cc2 <main+0x54>
		{
			HLCD_vidsendChar(key);
    1cce:	88 89       	ldd	r24, Y+16	; 0x10
    1cd0:	0e 94 84 0b 	call	0x1708	; 0x1708 <HLCD_vidsendChar>
			if((key == '+') || (key == '-') || (key == '/') || (key == '*'))
    1cd4:	88 89       	ldd	r24, Y+16	; 0x10
    1cd6:	8b 32       	cpi	r24, 0x2B	; 43
    1cd8:	49 f0       	breq	.+18     	; 0x1cec <main+0x7e>
    1cda:	88 89       	ldd	r24, Y+16	; 0x10
    1cdc:	8d 32       	cpi	r24, 0x2D	; 45
    1cde:	31 f0       	breq	.+12     	; 0x1cec <main+0x7e>
    1ce0:	88 89       	ldd	r24, Y+16	; 0x10
    1ce2:	8f 32       	cpi	r24, 0x2F	; 47
    1ce4:	19 f0       	breq	.+6      	; 0x1cec <main+0x7e>
    1ce6:	88 89       	ldd	r24, Y+16	; 0x10
    1ce8:	8a 32       	cpi	r24, 0x2A	; 42
    1cea:	31 f4       	brne	.+12     	; 0x1cf8 <main+0x8a>
			{
				operation = key;
    1cec:	88 89       	ldd	r24, Y+16	; 0x10
    1cee:	8d 87       	std	Y+13, r24	; 0x0d
				count =0;
    1cf0:	1f 86       	std	Y+15, r1	; 0x0f
				flag = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	8e 87       	std	Y+14, r24	; 0x0e
    1cf6:	e5 cf       	rjmp	.-54     	; 0x1cc2 <main+0x54>

			}



			else if(key == '=')
    1cf8:	88 89       	ldd	r24, Y+16	; 0x10
    1cfa:	8d 33       	cpi	r24, 0x3D	; 61
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <main+0x92>
    1cfe:	47 c1       	rjmp	.+654    	; 0x1f8e <main+0x320>
			{
				flag = 0;
    1d00:	1e 86       	std	Y+14, r1	; 0x0e

				switch (operation)
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	3e a3       	std	Y+38, r19	; 0x26
    1d0a:	2d a3       	std	Y+37, r18	; 0x25
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	8b 32       	cpi	r24, 0x2B	; 43
    1d12:	91 05       	cpc	r25, r1
    1d14:	c9 f0       	breq	.+50     	; 0x1d48 <main+0xda>
    1d16:	2d a1       	ldd	r18, Y+37	; 0x25
    1d18:	3e a1       	ldd	r19, Y+38	; 0x26
    1d1a:	2c 32       	cpi	r18, 0x2C	; 44
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	3c f4       	brge	.+14     	; 0x1d2e <main+0xc0>
    1d20:	8d a1       	ldd	r24, Y+37	; 0x25
    1d22:	9e a1       	ldd	r25, Y+38	; 0x26
    1d24:	8a 32       	cpi	r24, 0x2A	; 42
    1d26:	91 05       	cpc	r25, r1
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <main+0xbe>
    1d2a:	e9 c0       	rjmp	.+466    	; 0x1efe <main+0x290>
    1d2c:	ca cf       	rjmp	.-108    	; 0x1cc2 <main+0x54>
    1d2e:	2d a1       	ldd	r18, Y+37	; 0x25
    1d30:	3e a1       	ldd	r19, Y+38	; 0x26
    1d32:	2d 32       	cpi	r18, 0x2D	; 45
    1d34:	31 05       	cpc	r19, r1
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <main+0xcc>
    1d38:	49 c0       	rjmp	.+146    	; 0x1dcc <main+0x15e>
    1d3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d3e:	8f 32       	cpi	r24, 0x2F	; 47
    1d40:	91 05       	cpc	r25, r1
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <main+0xd8>
    1d44:	87 c0       	rjmp	.+270    	; 0x1e54 <main+0x1e6>
    1d46:	bd cf       	rjmp	.-134    	; 0x1cc2 <main+0x54>
					{
						case '+':
							res = atoi (NUM1) + atoi(NUM2);
    1d48:	ce 01       	movw	r24, r28
    1d4a:	41 96       	adiw	r24, 0x11	; 17
    1d4c:	0e 94 6f 10 	call	0x20de	; 0x20de <atoi>
    1d50:	8c 01       	movw	r16, r24
    1d52:	ce 01       	movw	r24, r28
    1d54:	46 96       	adiw	r24, 0x16	; 22
    1d56:	0e 94 6f 10 	call	0x20de	; 0x20de <atoi>
    1d5a:	80 0f       	add	r24, r16
    1d5c:	91 1f       	adc	r25, r17
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	8b 87       	std	Y+11, r24	; 0x0b
							itoa (res, rr, 10);
    1d62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d66:	9e 01       	movw	r18, r28
    1d68:	25 5e       	subi	r18, 0xE5	; 229
    1d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6c:	b9 01       	movw	r22, r18
    1d6e:	4a e0       	ldi	r20, 0x0A	; 10
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	0e 94 8d 10 	call	0x211a	; 0x211a <itoa>
							HLCD_vidGoToXY(2 , 1);
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	61 e0       	ldi	r22, 0x01	; 1
    1d7a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <HLCD_vidGoToXY>
							HLCD_vidWriteStr (rr);
    1d7e:	ce 01       	movw	r24, r28
    1d80:	4b 96       	adiw	r24, 0x1b	; 27
    1d82:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <HLCD_vidWriteStr>

							for (u8 i=0; i <5; i++)
    1d86:	1a 86       	std	Y+10, r1	; 0x0a
    1d88:	0c c0       	rjmp	.+24     	; 0x1da2 <main+0x134>
							{
								NUM1[i]=0;
    1d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	ce 01       	movw	r24, r28
    1d92:	41 96       	adiw	r24, 0x11	; 17
    1d94:	fc 01       	movw	r30, r24
    1d96:	e2 0f       	add	r30, r18
    1d98:	f3 1f       	adc	r31, r19
    1d9a:	10 82       	st	Z, r1
							res = atoi (NUM1) + atoi(NUM2);
							itoa (res, rr, 10);
							HLCD_vidGoToXY(2 , 1);
							HLCD_vidWriteStr (rr);

							for (u8 i=0; i <5; i++)
    1d9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	8a 87       	std	Y+10, r24	; 0x0a
    1da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da4:	85 30       	cpi	r24, 0x05	; 5
    1da6:	88 f3       	brcs	.-30     	; 0x1d8a <main+0x11c>
								NUM1[i]=0;


							}

							for (u8 i=0; i <5; i++)
    1da8:	19 86       	std	Y+9, r1	; 0x09
    1daa:	0c c0       	rjmp	.+24     	; 0x1dc4 <main+0x156>
							{

								NUM2 [i] =0;
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	ce 01       	movw	r24, r28
    1db4:	46 96       	adiw	r24, 0x16	; 22
    1db6:	fc 01       	movw	r30, r24
    1db8:	e2 0f       	add	r30, r18
    1dba:	f3 1f       	adc	r31, r19
    1dbc:	10 82       	st	Z, r1
								NUM1[i]=0;


							}

							for (u8 i=0; i <5; i++)
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	8f 5f       	subi	r24, 0xFF	; 255
    1dc2:	89 87       	std	Y+9, r24	; 0x09
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	85 30       	cpi	r24, 0x05	; 5
    1dc8:	88 f3       	brcs	.-30     	; 0x1dac <main+0x13e>
    1dca:	7b cf       	rjmp	.-266    	; 0x1cc2 <main+0x54>


							break;

						case '-' :
							res = atoi (NUM1) - atoi(NUM2);
    1dcc:	ce 01       	movw	r24, r28
    1dce:	41 96       	adiw	r24, 0x11	; 17
    1dd0:	0e 94 6f 10 	call	0x20de	; 0x20de <atoi>
    1dd4:	8c 01       	movw	r16, r24
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	46 96       	adiw	r24, 0x16	; 22
    1dda:	0e 94 6f 10 	call	0x20de	; 0x20de <atoi>
    1dde:	98 01       	movw	r18, r16
    1de0:	28 1b       	sub	r18, r24
    1de2:	39 0b       	sbc	r19, r25
    1de4:	c9 01       	movw	r24, r18
    1de6:	9c 87       	std	Y+12, r25	; 0x0c
    1de8:	8b 87       	std	Y+11, r24	; 0x0b
							itoa (res, rr, 10);
    1dea:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dec:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dee:	9e 01       	movw	r18, r28
    1df0:	25 5e       	subi	r18, 0xE5	; 229
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	b9 01       	movw	r22, r18
    1df6:	4a e0       	ldi	r20, 0x0A	; 10
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	0e 94 8d 10 	call	0x211a	; 0x211a <itoa>
							HLCD_vidGoToXY(2 , 1);
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <HLCD_vidGoToXY>
								//HLCD_vidsendChar ('-');
								//HLCD_vidWriteStr (rr);
							//}                            // i think this is not true, i think i should think from the point of negative numbers that had been explained by saif
							//else
							//{
								HLCD_vidWriteStr (rr);
    1e06:	ce 01       	movw	r24, r28
    1e08:	4b 96       	adiw	r24, 0x1b	; 27
    1e0a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <HLCD_vidWriteStr>
							//}



							for (u8 i=0; i <5; i++)
    1e0e:	18 86       	std	Y+8, r1	; 0x08
    1e10:	0c c0       	rjmp	.+24     	; 0x1e2a <main+0x1bc>
							{
								NUM1[i]=0;
    1e12:	88 85       	ldd	r24, Y+8	; 0x08
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	ce 01       	movw	r24, r28
    1e1a:	41 96       	adiw	r24, 0x11	; 17
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f3 1f       	adc	r31, r19
    1e22:	10 82       	st	Z, r1
								HLCD_vidWriteStr (rr);
							//}



							for (u8 i=0; i <5; i++)
    1e24:	88 85       	ldd	r24, Y+8	; 0x08
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	88 87       	std	Y+8, r24	; 0x08
    1e2a:	88 85       	ldd	r24, Y+8	; 0x08
    1e2c:	85 30       	cpi	r24, 0x05	; 5
    1e2e:	88 f3       	brcs	.-30     	; 0x1e12 <main+0x1a4>
							{
								NUM1[i]=0;

							}

							for (u8 i=0; i <5; i++)
    1e30:	1f 82       	std	Y+7, r1	; 0x07
    1e32:	0c c0       	rjmp	.+24     	; 0x1e4c <main+0x1de>
							{

								NUM2 [i] =0;
    1e34:	8f 81       	ldd	r24, Y+7	; 0x07
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	46 96       	adiw	r24, 0x16	; 22
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e2 0f       	add	r30, r18
    1e42:	f3 1f       	adc	r31, r19
    1e44:	10 82       	st	Z, r1
							{
								NUM1[i]=0;

							}

							for (u8 i=0; i <5; i++)
    1e46:	8f 81       	ldd	r24, Y+7	; 0x07
    1e48:	8f 5f       	subi	r24, 0xFF	; 255
    1e4a:	8f 83       	std	Y+7, r24	; 0x07
    1e4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e4e:	85 30       	cpi	r24, 0x05	; 5
    1e50:	88 f3       	brcs	.-30     	; 0x1e34 <main+0x1c6>
    1e52:	37 cf       	rjmp	.-402    	; 0x1cc2 <main+0x54>


							break;

						case '/' :
							res = atoi (NUM1) / atoi(NUM2);
    1e54:	ce 01       	movw	r24, r28
    1e56:	41 96       	adiw	r24, 0x11	; 17
    1e58:	0e 94 6f 10 	call	0x20de	; 0x20de <atoi>
    1e5c:	8c 01       	movw	r16, r24
    1e5e:	ce 01       	movw	r24, r28
    1e60:	46 96       	adiw	r24, 0x16	; 22
    1e62:	0e 94 6f 10 	call	0x20de	; 0x20de <atoi>
    1e66:	9c 01       	movw	r18, r24
    1e68:	c8 01       	movw	r24, r16
    1e6a:	b9 01       	movw	r22, r18
    1e6c:	0e 94 11 10 	call	0x2022	; 0x2022 <__divmodhi4>
    1e70:	cb 01       	movw	r24, r22
    1e72:	9c 87       	std	Y+12, r25	; 0x0c
    1e74:	8b 87       	std	Y+11, r24	; 0x0b

							if (atoi(NUM2) == 0)
    1e76:	ce 01       	movw	r24, r28
    1e78:	46 96       	adiw	r24, 0x16	; 22
    1e7a:	0e 94 6f 10 	call	0x20de	; 0x20de <atoi>
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	49 f4       	brne	.+18     	; 0x1e94 <main+0x226>
							{
								HLCD_vidGoToXY(2 , 1);
    1e82:	82 e0       	ldi	r24, 0x02	; 2
    1e84:	61 e0       	ldi	r22, 0x01	; 1
    1e86:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <HLCD_vidGoToXY>
								HLCD_vidWriteStr ("Error!");
    1e8a:	80 e6       	ldi	r24, 0x60	; 96
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <HLCD_vidWriteStr>
    1e92:	12 c0       	rjmp	.+36     	; 0x1eb8 <main+0x24a>
							}
							else
							{
								itoa (res, rr, 10);
    1e94:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e96:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e98:	9e 01       	movw	r18, r28
    1e9a:	25 5e       	subi	r18, 0xE5	; 229
    1e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9e:	b9 01       	movw	r22, r18
    1ea0:	4a e0       	ldi	r20, 0x0A	; 10
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	0e 94 8d 10 	call	0x211a	; 0x211a <itoa>
								HLCD_vidGoToXY(2 , 1);
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	61 e0       	ldi	r22, 0x01	; 1
    1eac:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <HLCD_vidGoToXY>
								HLCD_vidWriteStr (rr);
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	4b 96       	adiw	r24, 0x1b	; 27
    1eb4:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <HLCD_vidWriteStr>
							}



							for (u8 i=0; i <5; i++)
    1eb8:	1e 82       	std	Y+6, r1	; 0x06
    1eba:	0c c0       	rjmp	.+24     	; 0x1ed4 <main+0x266>
							{
								NUM1[i]=0;
    1ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	41 96       	adiw	r24, 0x11	; 17
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	e2 0f       	add	r30, r18
    1eca:	f3 1f       	adc	r31, r19
    1ecc:	10 82       	st	Z, r1
								HLCD_vidWriteStr (rr);
							}



							for (u8 i=0; i <5; i++)
    1ece:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed0:	8f 5f       	subi	r24, 0xFF	; 255
    1ed2:	8e 83       	std	Y+6, r24	; 0x06
    1ed4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed6:	85 30       	cpi	r24, 0x05	; 5
    1ed8:	88 f3       	brcs	.-30     	; 0x1ebc <main+0x24e>
							{
								NUM1[i]=0;

							}

							for (u8 i=0; i <5; i++)
    1eda:	1d 82       	std	Y+5, r1	; 0x05
    1edc:	0c c0       	rjmp	.+24     	; 0x1ef6 <main+0x288>
							{

								NUM2 [i] =0;
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	46 96       	adiw	r24, 0x16	; 22
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e2 0f       	add	r30, r18
    1eec:	f3 1f       	adc	r31, r19
    1eee:	10 82       	st	Z, r1
							{
								NUM1[i]=0;

							}

							for (u8 i=0; i <5; i++)
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	85 30       	cpi	r24, 0x05	; 5
    1efa:	88 f3       	brcs	.-30     	; 0x1ede <main+0x270>
    1efc:	e2 ce       	rjmp	.-572    	; 0x1cc2 <main+0x54>


							break;

						case '*' :
							res = atoi (NUM1) * atoi(NUM2);
    1efe:	ce 01       	movw	r24, r28
    1f00:	41 96       	adiw	r24, 0x11	; 17
    1f02:	0e 94 6f 10 	call	0x20de	; 0x20de <atoi>
    1f06:	8c 01       	movw	r16, r24
    1f08:	ce 01       	movw	r24, r28
    1f0a:	46 96       	adiw	r24, 0x16	; 22
    1f0c:	0e 94 6f 10 	call	0x20de	; 0x20de <atoi>
    1f10:	9c 01       	movw	r18, r24
    1f12:	02 9f       	mul	r16, r18
    1f14:	c0 01       	movw	r24, r0
    1f16:	03 9f       	mul	r16, r19
    1f18:	90 0d       	add	r25, r0
    1f1a:	12 9f       	mul	r17, r18
    1f1c:	90 0d       	add	r25, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	9c 87       	std	Y+12, r25	; 0x0c
    1f22:	8b 87       	std	Y+11, r24	; 0x0b
							itoa (res, rr, 10);
    1f24:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f26:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f28:	9e 01       	movw	r18, r28
    1f2a:	25 5e       	subi	r18, 0xE5	; 229
    1f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2e:	b9 01       	movw	r22, r18
    1f30:	4a e0       	ldi	r20, 0x0A	; 10
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	0e 94 8d 10 	call	0x211a	; 0x211a <itoa>
							HLCD_vidGoToXY(2 , 1);
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <HLCD_vidGoToXY>
							HLCD_vidWriteStr (rr);
    1f40:	ce 01       	movw	r24, r28
    1f42:	4b 96       	adiw	r24, 0x1b	; 27
    1f44:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <HLCD_vidWriteStr>

							for (u8 i=0; i <5; i++)
    1f48:	1c 82       	std	Y+4, r1	; 0x04
    1f4a:	0c c0       	rjmp	.+24     	; 0x1f64 <main+0x2f6>
							{
								NUM1[i]=0;
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	ce 01       	movw	r24, r28
    1f54:	41 96       	adiw	r24, 0x11	; 17
    1f56:	fc 01       	movw	r30, r24
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	10 82       	st	Z, r1
							res = atoi (NUM1) * atoi(NUM2);
							itoa (res, rr, 10);
							HLCD_vidGoToXY(2 , 1);
							HLCD_vidWriteStr (rr);

							for (u8 i=0; i <5; i++)
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	8f 5f       	subi	r24, 0xFF	; 255
    1f62:	8c 83       	std	Y+4, r24	; 0x04
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	85 30       	cpi	r24, 0x05	; 5
    1f68:	88 f3       	brcs	.-30     	; 0x1f4c <main+0x2de>
							{
								NUM1[i]=0;

							}

							for (u8 i=0; i <5; i++)
    1f6a:	1b 82       	std	Y+3, r1	; 0x03
    1f6c:	0c c0       	rjmp	.+24     	; 0x1f86 <main+0x318>
							{

								NUM2 [i] =0;
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	ce 01       	movw	r24, r28
    1f76:	46 96       	adiw	r24, 0x16	; 22
    1f78:	fc 01       	movw	r30, r24
    1f7a:	e2 0f       	add	r30, r18
    1f7c:	f3 1f       	adc	r31, r19
    1f7e:	10 82       	st	Z, r1
							{
								NUM1[i]=0;

							}

							for (u8 i=0; i <5; i++)
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	8f 5f       	subi	r24, 0xFF	; 255
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	85 30       	cpi	r24, 0x05	; 5
    1f8a:	88 f3       	brcs	.-30     	; 0x1f6e <main+0x300>
    1f8c:	9a ce       	rjmp	.-716    	; 0x1cc2 <main+0x54>




			}
			else if (key == 'c')
    1f8e:	88 89       	ldd	r24, Y+16	; 0x10
    1f90:	83 36       	cpi	r24, 0x63	; 99
    1f92:	41 f5       	brne	.+80     	; 0x1fe4 <main+0x376>
			{
				 HLCD_vidsendCMD(LCD_CLR);
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <HLCD_vidsendCMD>

					for (u8 i=0; i <5; i++)
    1f9a:	1a 82       	std	Y+2, r1	; 0x02
    1f9c:	0c c0       	rjmp	.+24     	; 0x1fb6 <main+0x348>
					{
						NUM1[i]=0;
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	41 96       	adiw	r24, 0x11	; 17
    1fa8:	fc 01       	movw	r30, r24
    1faa:	e2 0f       	add	r30, r18
    1fac:	f3 1f       	adc	r31, r19
    1fae:	10 82       	st	Z, r1
			}
			else if (key == 'c')
			{
				 HLCD_vidsendCMD(LCD_CLR);

					for (u8 i=0; i <5; i++)
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	8f 5f       	subi	r24, 0xFF	; 255
    1fb4:	8a 83       	std	Y+2, r24	; 0x02
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	85 30       	cpi	r24, 0x05	; 5
    1fba:	88 f3       	brcs	.-30     	; 0x1f9e <main+0x330>
					{
						NUM1[i]=0;

					}

					for (u8 i=0; i <5; i++)
    1fbc:	19 82       	std	Y+1, r1	; 0x01
    1fbe:	0c c0       	rjmp	.+24     	; 0x1fd8 <main+0x36a>
					{

						NUM2 [i] =0;
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	46 96       	adiw	r24, 0x16	; 22
    1fca:	fc 01       	movw	r30, r24
    1fcc:	e2 0f       	add	r30, r18
    1fce:	f3 1f       	adc	r31, r19
    1fd0:	10 82       	st	Z, r1
					{
						NUM1[i]=0;

					}

					for (u8 i=0; i <5; i++)
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	8f 5f       	subi	r24, 0xFF	; 255
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	85 30       	cpi	r24, 0x05	; 5
    1fdc:	88 f3       	brcs	.-30     	; 0x1fc0 <main+0x352>
					{

						NUM2 [i] =0;
					}

					flag = 0;
    1fde:	1e 86       	std	Y+14, r1	; 0x0e
					count =0;
    1fe0:	1f 86       	std	Y+15, r1	; 0x0f
    1fe2:	6f ce       	rjmp	.-802    	; 0x1cc2 <main+0x54>


			}
			else
			{
				if(flag == 0)
    1fe4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fe6:	88 23       	and	r24, r24
    1fe8:	71 f4       	brne	.+28     	; 0x2006 <main+0x398>
				{
					NUM1[count] = key;
    1fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	41 96       	adiw	r24, 0x11	; 17
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e2 0f       	add	r30, r18
    1ff8:	f3 1f       	adc	r31, r19
    1ffa:	88 89       	ldd	r24, Y+16	; 0x10
    1ffc:	80 83       	st	Z, r24
					count++;
    1ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	8f 87       	std	Y+15, r24	; 0x0f
    2004:	5e ce       	rjmp	.-836    	; 0x1cc2 <main+0x54>

				}
				else
				{
					NUM2[count] = key;
    2006:	8f 85       	ldd	r24, Y+15	; 0x0f
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	ce 01       	movw	r24, r28
    200e:	46 96       	adiw	r24, 0x16	; 22
    2010:	fc 01       	movw	r30, r24
    2012:	e2 0f       	add	r30, r18
    2014:	f3 1f       	adc	r31, r19
    2016:	88 89       	ldd	r24, Y+16	; 0x10
    2018:	80 83       	st	Z, r24
					count++;
    201a:	8f 85       	ldd	r24, Y+15	; 0x0f
    201c:	8f 5f       	subi	r24, 0xFF	; 255
    201e:	8f 87       	std	Y+15, r24	; 0x0f
    2020:	50 ce       	rjmp	.-864    	; 0x1cc2 <main+0x54>

00002022 <__divmodhi4>:
    2022:	97 fb       	bst	r25, 7
    2024:	09 2e       	mov	r0, r25
    2026:	07 26       	eor	r0, r23
    2028:	0a d0       	rcall	.+20     	; 0x203e <__divmodhi4_neg1>
    202a:	77 fd       	sbrc	r23, 7
    202c:	04 d0       	rcall	.+8      	; 0x2036 <__divmodhi4_neg2>
    202e:	0c d0       	rcall	.+24     	; 0x2048 <__udivmodhi4>
    2030:	06 d0       	rcall	.+12     	; 0x203e <__divmodhi4_neg1>
    2032:	00 20       	and	r0, r0
    2034:	1a f4       	brpl	.+6      	; 0x203c <__divmodhi4_exit>

00002036 <__divmodhi4_neg2>:
    2036:	70 95       	com	r23
    2038:	61 95       	neg	r22
    203a:	7f 4f       	sbci	r23, 0xFF	; 255

0000203c <__divmodhi4_exit>:
    203c:	08 95       	ret

0000203e <__divmodhi4_neg1>:
    203e:	f6 f7       	brtc	.-4      	; 0x203c <__divmodhi4_exit>
    2040:	90 95       	com	r25
    2042:	81 95       	neg	r24
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	08 95       	ret

00002048 <__udivmodhi4>:
    2048:	aa 1b       	sub	r26, r26
    204a:	bb 1b       	sub	r27, r27
    204c:	51 e1       	ldi	r21, 0x11	; 17
    204e:	07 c0       	rjmp	.+14     	; 0x205e <__udivmodhi4_ep>

00002050 <__udivmodhi4_loop>:
    2050:	aa 1f       	adc	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	a6 17       	cp	r26, r22
    2056:	b7 07       	cpc	r27, r23
    2058:	10 f0       	brcs	.+4      	; 0x205e <__udivmodhi4_ep>
    205a:	a6 1b       	sub	r26, r22
    205c:	b7 0b       	sbc	r27, r23

0000205e <__udivmodhi4_ep>:
    205e:	88 1f       	adc	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	5a 95       	dec	r21
    2064:	a9 f7       	brne	.-22     	; 0x2050 <__udivmodhi4_loop>
    2066:	80 95       	com	r24
    2068:	90 95       	com	r25
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	08 95       	ret

00002070 <__prologue_saves__>:
    2070:	2f 92       	push	r2
    2072:	3f 92       	push	r3
    2074:	4f 92       	push	r4
    2076:	5f 92       	push	r5
    2078:	6f 92       	push	r6
    207a:	7f 92       	push	r7
    207c:	8f 92       	push	r8
    207e:	9f 92       	push	r9
    2080:	af 92       	push	r10
    2082:	bf 92       	push	r11
    2084:	cf 92       	push	r12
    2086:	df 92       	push	r13
    2088:	ef 92       	push	r14
    208a:	ff 92       	push	r15
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	ca 1b       	sub	r28, r26
    209a:	db 0b       	sbc	r29, r27
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	09 94       	ijmp

000020a8 <__epilogue_restores__>:
    20a8:	2a 88       	ldd	r2, Y+18	; 0x12
    20aa:	39 88       	ldd	r3, Y+17	; 0x11
    20ac:	48 88       	ldd	r4, Y+16	; 0x10
    20ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    20b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    20b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    20b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    20b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    20b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    20ba:	b9 84       	ldd	r11, Y+9	; 0x09
    20bc:	c8 84       	ldd	r12, Y+8	; 0x08
    20be:	df 80       	ldd	r13, Y+7	; 0x07
    20c0:	ee 80       	ldd	r14, Y+6	; 0x06
    20c2:	fd 80       	ldd	r15, Y+5	; 0x05
    20c4:	0c 81       	ldd	r16, Y+4	; 0x04
    20c6:	1b 81       	ldd	r17, Y+3	; 0x03
    20c8:	aa 81       	ldd	r26, Y+2	; 0x02
    20ca:	b9 81       	ldd	r27, Y+1	; 0x01
    20cc:	ce 0f       	add	r28, r30
    20ce:	d1 1d       	adc	r29, r1
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	ed 01       	movw	r28, r26
    20dc:	08 95       	ret

000020de <atoi>:
    20de:	fc 01       	movw	r30, r24
    20e0:	88 27       	eor	r24, r24
    20e2:	99 27       	eor	r25, r25
    20e4:	e8 94       	clt
    20e6:	21 91       	ld	r18, Z+
    20e8:	20 32       	cpi	r18, 0x20	; 32
    20ea:	e9 f3       	breq	.-6      	; 0x20e6 <atoi+0x8>
    20ec:	29 30       	cpi	r18, 0x09	; 9
    20ee:	10 f0       	brcs	.+4      	; 0x20f4 <atoi+0x16>
    20f0:	2e 30       	cpi	r18, 0x0E	; 14
    20f2:	c8 f3       	brcs	.-14     	; 0x20e6 <atoi+0x8>
    20f4:	2b 32       	cpi	r18, 0x2B	; 43
    20f6:	41 f0       	breq	.+16     	; 0x2108 <atoi+0x2a>
    20f8:	2d 32       	cpi	r18, 0x2D	; 45
    20fa:	39 f4       	brne	.+14     	; 0x210a <atoi+0x2c>
    20fc:	68 94       	set
    20fe:	04 c0       	rjmp	.+8      	; 0x2108 <atoi+0x2a>
    2100:	0e 94 ae 10 	call	0x215c	; 0x215c <__mulhi_const_10>
    2104:	82 0f       	add	r24, r18
    2106:	91 1d       	adc	r25, r1
    2108:	21 91       	ld	r18, Z+
    210a:	20 53       	subi	r18, 0x30	; 48
    210c:	2a 30       	cpi	r18, 0x0A	; 10
    210e:	c0 f3       	brcs	.-16     	; 0x2100 <atoi+0x22>
    2110:	1e f4       	brtc	.+6      	; 0x2118 <atoi+0x3a>
    2112:	90 95       	com	r25
    2114:	81 95       	neg	r24
    2116:	9f 4f       	sbci	r25, 0xFF	; 255
    2118:	08 95       	ret

0000211a <itoa>:
    211a:	fb 01       	movw	r30, r22
    211c:	9f 01       	movw	r18, r30
    211e:	e8 94       	clt
    2120:	42 30       	cpi	r20, 0x02	; 2
    2122:	c4 f0       	brlt	.+48     	; 0x2154 <itoa+0x3a>
    2124:	45 32       	cpi	r20, 0x25	; 37
    2126:	b4 f4       	brge	.+44     	; 0x2154 <itoa+0x3a>
    2128:	4a 30       	cpi	r20, 0x0A	; 10
    212a:	29 f4       	brne	.+10     	; 0x2136 <itoa+0x1c>
    212c:	97 fb       	bst	r25, 7
    212e:	1e f4       	brtc	.+6      	; 0x2136 <itoa+0x1c>
    2130:	90 95       	com	r25
    2132:	81 95       	neg	r24
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	64 2f       	mov	r22, r20
    2138:	77 27       	eor	r23, r23
    213a:	0e 94 24 10 	call	0x2048	; 0x2048 <__udivmodhi4>
    213e:	80 5d       	subi	r24, 0xD0	; 208
    2140:	8a 33       	cpi	r24, 0x3A	; 58
    2142:	0c f0       	brlt	.+2      	; 0x2146 <itoa+0x2c>
    2144:	89 5d       	subi	r24, 0xD9	; 217
    2146:	81 93       	st	Z+, r24
    2148:	cb 01       	movw	r24, r22
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	a1 f7       	brne	.-24     	; 0x2136 <itoa+0x1c>
    214e:	16 f4       	brtc	.+4      	; 0x2154 <itoa+0x3a>
    2150:	5d e2       	ldi	r21, 0x2D	; 45
    2152:	51 93       	st	Z+, r21
    2154:	10 82       	st	Z, r1
    2156:	c9 01       	movw	r24, r18
    2158:	0c 94 b6 10 	jmp	0x216c	; 0x216c <strrev>

0000215c <__mulhi_const_10>:
    215c:	7a e0       	ldi	r23, 0x0A	; 10
    215e:	97 9f       	mul	r25, r23
    2160:	90 2d       	mov	r25, r0
    2162:	87 9f       	mul	r24, r23
    2164:	80 2d       	mov	r24, r0
    2166:	91 0d       	add	r25, r1
    2168:	11 24       	eor	r1, r1
    216a:	08 95       	ret

0000216c <strrev>:
    216c:	dc 01       	movw	r26, r24
    216e:	fc 01       	movw	r30, r24
    2170:	67 2f       	mov	r22, r23
    2172:	71 91       	ld	r23, Z+
    2174:	77 23       	and	r23, r23
    2176:	e1 f7       	brne	.-8      	; 0x2170 <strrev+0x4>
    2178:	32 97       	sbiw	r30, 0x02	; 2
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <strrev+0x18>
    217c:	7c 91       	ld	r23, X
    217e:	6d 93       	st	X+, r22
    2180:	70 83       	st	Z, r23
    2182:	62 91       	ld	r22, -Z
    2184:	ae 17       	cp	r26, r30
    2186:	bf 07       	cpc	r27, r31
    2188:	c8 f3       	brcs	.-14     	; 0x217c <strrev+0x10>
    218a:	08 95       	ret

0000218c <_exit>:
    218c:	f8 94       	cli

0000218e <__stop_program>:
    218e:	ff cf       	rjmp	.-2      	; 0x218e <__stop_program>
